From d55f32cb968000c2a1277534f68bcd85b763c222 Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sat, 29 Jun 2024 15:40:57 -0300
Subject: [PATCH 01/12] feature model table at database

---
 Models/Categories/DevicesModel.cs             | 19 +++++++++++++++++++
 .../OperationModelEnums.cs                    | 11 +++++++++++
 2 files changed, 30 insertions(+)
 create mode 100644 Models/Categories/DevicesModel.cs
 create mode 100644 Models/Categories/OperationModelEnums/OperationModelEnums.cs

diff --git a/Models/Categories/DevicesModel.cs b/Models/Categories/DevicesModel.cs
new file mode 100644
index 0000000..8984a1b
--- /dev/null
+++ b/Models/Categories/DevicesModel.cs
@@ -0,0 +1,19 @@
+using System.ComponentModel.DataAnnotations;
+using System.ComponentModel.DataAnnotations.Schema;
+using MacSave.Models.Categories.OperationModelEnums;
+
+namespace MacSave.Models.Categories
+{
+    public class DevicesModel
+    {
+        [Key]
+        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
+        public string DeviceId { get; set; }
+
+        public string ModelOfDevice { get; set; }
+
+        public string Ownew { get; set; }
+
+        public OperationModelEnum OperationMode { get; set; } = OperationModelEnum.None;
+    }
+}
diff --git a/Models/Categories/OperationModelEnums/OperationModelEnums.cs b/Models/Categories/OperationModelEnums/OperationModelEnums.cs
new file mode 100644
index 0000000..a9d6eaa
--- /dev/null
+++ b/Models/Categories/OperationModelEnums/OperationModelEnums.cs
@@ -0,0 +1,11 @@
+namespace MacSave.Models.Categories.OperationModelEnums
+{
+	public enum OperationModelEnum
+    {
+        Router = 0,
+        Bridge = 1,
+        RouterAndBrige = 2,
+        
+        None = 3
+	}
+}
\ No newline at end of file
-- 
2.39.0.windows.2


From 8d54ebd5400126be2b7f7f30e33e6a55d97330c7 Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sat, 29 Jun 2024 18:17:03 -0300
Subject: [PATCH 02/12] error at create category, fiel makerId is required

---
 Context/dbContext.cs                          |  17 +-
 Controllers/CateriesActions.cs                | 140 ++++++++++
 Controllers/DeviceActionsController.cs        |   1 -
 .../20240629193731_CategoryCreate.Designer.cs | 260 ++++++++++++++++++
 Migrations/20240629193731_CategoryCreate.cs   |  61 ++++
 ...240629194230_CategoryCreateFix.Designer.cs | 260 ++++++++++++++++++
 .../20240629194230_CategoryCreateFix.cs       |  22 ++
 ...20240629195049_GenerateMakerId.Designer.cs | 260 ++++++++++++++++++
 Migrations/20240629195049_GenerateMakerId.cs  |  22 ++
 ...40629200153_GenerateMakerIdFix.Designer.cs | 259 +++++++++++++++++
 .../20240629200153_GenerateMakerIdFix.cs      |  22 ++
 ...0629201225_GenerateMakerIdFix1.Designer.cs | 260 ++++++++++++++++++
 .../20240629201225_GenerateMakerIdFix1.cs     |  22 ++
 Migrations/DeviceDbModelSnapshot.cs           |  55 ++++
 Models/Categories/DevicesModel.cs             |  19 --
 .../Models of Devices/DeviceCategory.cs       |  26 ++
 .../Models of Devices/DevicesMaker.cs         |  27 ++
 17 files changed, 1712 insertions(+), 21 deletions(-)
 create mode 100644 Controllers/CateriesActions.cs
 create mode 100644 Migrations/20240629193731_CategoryCreate.Designer.cs
 create mode 100644 Migrations/20240629193731_CategoryCreate.cs
 create mode 100644 Migrations/20240629194230_CategoryCreateFix.Designer.cs
 create mode 100644 Migrations/20240629194230_CategoryCreateFix.cs
 create mode 100644 Migrations/20240629195049_GenerateMakerId.Designer.cs
 create mode 100644 Migrations/20240629195049_GenerateMakerId.cs
 create mode 100644 Migrations/20240629200153_GenerateMakerIdFix.Designer.cs
 create mode 100644 Migrations/20240629200153_GenerateMakerIdFix.cs
 create mode 100644 Migrations/20240629201225_GenerateMakerIdFix1.Designer.cs
 create mode 100644 Migrations/20240629201225_GenerateMakerIdFix1.cs
 delete mode 100644 Models/Categories/DevicesModel.cs
 create mode 100644 Models/Categories/Models of Devices/DeviceCategory.cs
 create mode 100644 Models/Categories/Models of Devices/DevicesMaker.cs

diff --git a/Context/dbContext.cs b/Context/dbContext.cs
index 47ed49e..18c2621 100644
--- a/Context/dbContext.cs
+++ b/Context/dbContext.cs
@@ -1,4 +1,6 @@
 using DeviceModel;
+using MacSave.Models.Categories;
+using MacSave.Models.Categories.Models_of_Devices;
 using MacSave.Models.SinalHistory;
 using MacToDatabaseModel;
 using Microsoft.EntityFrameworkCore;
@@ -16,13 +18,16 @@ namespace DeviceContext
         public DbSet<DeviceCreate> Devices => Set<DeviceCreate>();
         public DbSet<ProblemTreatWrapper> Problems => Set<ProblemTreatWrapper>();
         public DbSet<UsedAtWrapper> UsedAtClient => Set<UsedAtWrapper>();
-
         public DbSet<SinalHistory> Histories => Set<SinalHistory>();
 
         //items to upload and threat data
         public DbSet<FileToUpload> FilesUploads => Set<FileToUpload>();
         public DbSet<MacToDatabase> MacstoDbs => Set<MacToDatabase>();
 
+        //items from device categories
+        public DbSet<Maker> Makers => Set<Maker>();
+        public DbSet<DeviceCategory> DeviceCategories=> Set<DeviceCategory>();
+
         protected override void OnModelCreating(ModelBuilder modelBuilder)
         {
             modelBuilder.Entity<DeviceCreate>()
@@ -43,6 +48,16 @@ namespace DeviceContext
             .HasForeignKey(e => e.DeviceId)
             .IsRequired();
 
+             modelBuilder.Entity<Maker>()
+            .Property( e => e.MakerId)
+            .ValueGeneratedOnAdd();
+
+            modelBuilder.Entity<Maker>()
+            .HasMany(m => m.DeviceCategories)
+            .WithOne(m => m.Maker)
+            .HasForeignKey(m => m.MakerId)
+            .IsRequired();
+
 
         }
     }
diff --git a/Controllers/CateriesActions.cs b/Controllers/CateriesActions.cs
new file mode 100644
index 0000000..42b4c50
--- /dev/null
+++ b/Controllers/CateriesActions.cs
@@ -0,0 +1,140 @@
+using DeviceContext;
+using MacSave.Models.Categories;
+using MacSave.Models.Categories.Models_of_Devices;
+using Microsoft.AspNetCore.Mvc;
+using Microsoft.EntityFrameworkCore;
+
+namespace MacSave.Controllers
+{
+    [ApiController]
+    [Route("api/[controller]")]
+    public class CateriesActions : ControllerBase
+    {
+        private readonly DeviceDb _db;
+
+        public CateriesActions(DeviceDb db)
+        {
+            _db = db;
+        }
+
+        [HttpGet]
+        [Route("/GetAllModels")]
+        public async Task<ActionResult<Maker>> GetAllModels()
+        {
+            try
+            {
+                var allMakers = await _db.Makers.ToListAsync();
+                return Ok(allMakers);
+            }
+            catch (Exception ex)
+            {
+                return BadRequest(ex);
+            }
+        }
+
+        [HttpGet]
+        [Route("/GetAllCategories")]
+        public async Task<ActionResult<Maker>> GetAllCategories()
+        {
+            try
+            {
+                var allCategories = await _db.DeviceCategories.ToListAsync();
+                return Ok(allCategories);
+            }
+            catch (Exception ex)
+            {
+                return BadRequest(ex);
+            }
+        }
+
+        [HttpPost]
+        [Route("/CreateMaker")]
+        public async Task<ActionResult<Maker>> CreateMaker([FromBody] Maker maker)
+        {
+            try
+            {
+                if (maker == null)
+                {
+                    return BadRequest("Maker Cannot be empyt");
+                }
+                //create a func that recive this data and query them
+                if (await _db.Makers.AnyAsync(x => x.MakerName == maker.MakerName))
+                {
+                    return BadRequest("Maker Already Exist");
+                }
+
+                var makerCleaned = new Maker
+                {
+                    MakerName = maker.MakerName,
+                    MakerId = Guid.NewGuid().ToString(),
+                };
+
+                await _db.Makers.AddAsync(makerCleaned);
+                await _db.SaveChangesAsync();
+                return Ok(makerCleaned);
+            }
+            catch (Exception ex)
+            {
+                return BadRequest(ex);
+            }
+        }
+
+        [HttpPost]
+        [Route("/CreateCategory")]
+        public async Task<ActionResult<DeviceCategory>> CreateCategory(
+            [FromBody] DeviceCategory category
+        )
+        {
+            try
+            {
+                if (category == null)
+                {
+                    return BadRequest("Category cannot be empty");
+                }
+                if (
+                    await _db.DeviceCategories.AnyAsync(x =>
+                        x.DeviceCategoryName == category.DeviceCategoryName
+                    )
+                )
+                {
+                    return BadRequest("Category Already Exist");
+                }
+                if (await _db.Makers.FindAsync(category.MakerId) == null)
+                {
+                    return BadRequest("Owner Is a Not Valid Id");
+                }
+
+                var categoryCleaned = new DeviceCategory
+                {
+                    DeviceCategoryName = category.DeviceCategoryName,
+                    MakerId = category.MakerId,
+                    OperationMode = category.OperationMode,
+                    DeviceCategoryId = Guid.NewGuid().ToString()
+                };
+                await _db.DeviceCategories.AddAsync(categoryCleaned);
+                await _db.SaveChangesAsync();
+
+                var makerAdd = new Maker { };
+                makerAdd.AddDeviceCategory(category);
+                await _db.SaveChangesAsync();
+
+                return Ok(categoryCleaned);
+            }
+            catch (Exception ex)
+            {
+                return BadRequest(ex);
+            }
+        }
+
+        [HttpGet("{id}")]
+        public async Task<ActionResult<Maker>> GetMakerById(string id)
+        {
+            var maker = await _db.Makers.FindAsync(id);
+            if (maker == null)
+            {
+                return NotFound("DeviceNotFound");
+            }
+            return maker;
+        }
+    }
+}
diff --git a/Controllers/DeviceActionsController.cs b/Controllers/DeviceActionsController.cs
index 7d12ef4..2375822 100644
--- a/Controllers/DeviceActionsController.cs
+++ b/Controllers/DeviceActionsController.cs
@@ -5,7 +5,6 @@ using mac_register.Models.FullDeviceCreate;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.EntityFrameworkCore;
 using Model.ProblemTreatWrapper;
-using Models.UsedAtWrapper;
 using Models.UsedAtWrapper.UsedAtWrapper;
 
 namespace Controller.DeviceActionsController
diff --git a/Migrations/20240629193731_CategoryCreate.Designer.cs b/Migrations/20240629193731_CategoryCreate.Designer.cs
new file mode 100644
index 0000000..b372999
--- /dev/null
+++ b/Migrations/20240629193731_CategoryCreate.Designer.cs
@@ -0,0 +1,260 @@
+﻿// <auto-generated />
+using System;
+using DeviceContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    [DbContext(typeof(DeviceDb))]
+    [Migration("20240629193731_CategoryCreate")]
+    partial class CategoryCreate
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Property<string>("DeviceId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAcess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceId");
+
+                    b.ToTable("Devices");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalRX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalTX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Timestamp")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Histories");
+                });
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MacstoDbs");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Description")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Problems");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("UsedAtClient");
+                });
+
+            modelBuilder.Entity("ModelsFileToUpload.FileToUpload", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<byte[]>("Data")
+                        .IsRequired()
+                        .HasColumnType("BLOB");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("FilesUploads");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", "Maker")
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("Maker");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("SinalHistory")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("Problems")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("UsedAtClients")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Navigation("Problems");
+
+                    b.Navigation("SinalHistory");
+
+                    b.Navigation("UsedAtClients");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/20240629193731_CategoryCreate.cs b/Migrations/20240629193731_CategoryCreate.cs
new file mode 100644
index 0000000..520a644
--- /dev/null
+++ b/Migrations/20240629193731_CategoryCreate.cs
@@ -0,0 +1,61 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    /// <inheritdoc />
+    public partial class CategoryCreate : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.CreateTable(
+                name: "Makers",
+                columns: table => new
+                {
+                    MakerId = table.Column<string>(type: "TEXT", nullable: false),
+                    MakerName = table.Column<string>(type: "TEXT", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Makers", x => x.MakerId);
+                });
+
+            migrationBuilder.CreateTable(
+                name: "DeviceCategories",
+                columns: table => new
+                {
+                    DeviceCategoryId = table.Column<string>(type: "TEXT", nullable: false),
+                    DeviceCategoryName = table.Column<string>(type: "TEXT", nullable: false),
+                    OperationMode = table.Column<int>(type: "INTEGER", nullable: false),
+                    MakerId = table.Column<string>(type: "TEXT", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_DeviceCategories", x => x.DeviceCategoryId);
+                    table.ForeignKey(
+                        name: "FK_DeviceCategories_Makers_MakerId",
+                        column: x => x.MakerId,
+                        principalTable: "Makers",
+                        principalColumn: "MakerId",
+                        onDelete: ReferentialAction.Cascade);
+                });
+
+            migrationBuilder.CreateIndex(
+                name: "IX_DeviceCategories_MakerId",
+                table: "DeviceCategories",
+                column: "MakerId");
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "DeviceCategories");
+
+            migrationBuilder.DropTable(
+                name: "Makers");
+        }
+    }
+}
diff --git a/Migrations/20240629194230_CategoryCreateFix.Designer.cs b/Migrations/20240629194230_CategoryCreateFix.Designer.cs
new file mode 100644
index 0000000..c248bc1
--- /dev/null
+++ b/Migrations/20240629194230_CategoryCreateFix.Designer.cs
@@ -0,0 +1,260 @@
+﻿// <auto-generated />
+using System;
+using DeviceContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    [DbContext(typeof(DeviceDb))]
+    [Migration("20240629194230_CategoryCreateFix")]
+    partial class CategoryCreateFix
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Property<string>("DeviceId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAcess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceId");
+
+                    b.ToTable("Devices");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalRX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalTX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Timestamp")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Histories");
+                });
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MacstoDbs");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Description")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Problems");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("UsedAtClient");
+                });
+
+            modelBuilder.Entity("ModelsFileToUpload.FileToUpload", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<byte[]>("Data")
+                        .IsRequired()
+                        .HasColumnType("BLOB");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("FilesUploads");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", "Maker")
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("Maker");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("SinalHistory")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("Problems")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("UsedAtClients")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Navigation("Problems");
+
+                    b.Navigation("SinalHistory");
+
+                    b.Navigation("UsedAtClients");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/20240629194230_CategoryCreateFix.cs b/Migrations/20240629194230_CategoryCreateFix.cs
new file mode 100644
index 0000000..5e01241
--- /dev/null
+++ b/Migrations/20240629194230_CategoryCreateFix.cs
@@ -0,0 +1,22 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    /// <inheritdoc />
+    public partial class CategoryCreateFix : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+
+        }
+    }
+}
diff --git a/Migrations/20240629195049_GenerateMakerId.Designer.cs b/Migrations/20240629195049_GenerateMakerId.Designer.cs
new file mode 100644
index 0000000..a4c95a5
--- /dev/null
+++ b/Migrations/20240629195049_GenerateMakerId.Designer.cs
@@ -0,0 +1,260 @@
+﻿// <auto-generated />
+using System;
+using DeviceContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    [DbContext(typeof(DeviceDb))]
+    [Migration("20240629195049_GenerateMakerId")]
+    partial class GenerateMakerId
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Property<string>("DeviceId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAcess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceId");
+
+                    b.ToTable("Devices");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalRX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalTX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Timestamp")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Histories");
+                });
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MacstoDbs");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Description")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Problems");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("UsedAtClient");
+                });
+
+            modelBuilder.Entity("ModelsFileToUpload.FileToUpload", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<byte[]>("Data")
+                        .IsRequired()
+                        .HasColumnType("BLOB");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("FilesUploads");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", "Maker")
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("Maker");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("SinalHistory")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("Problems")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("UsedAtClients")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Navigation("Problems");
+
+                    b.Navigation("SinalHistory");
+
+                    b.Navigation("UsedAtClients");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/20240629195049_GenerateMakerId.cs b/Migrations/20240629195049_GenerateMakerId.cs
new file mode 100644
index 0000000..fa67763
--- /dev/null
+++ b/Migrations/20240629195049_GenerateMakerId.cs
@@ -0,0 +1,22 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    /// <inheritdoc />
+    public partial class GenerateMakerId : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+
+        }
+    }
+}
diff --git a/Migrations/20240629200153_GenerateMakerIdFix.Designer.cs b/Migrations/20240629200153_GenerateMakerIdFix.Designer.cs
new file mode 100644
index 0000000..e6af173
--- /dev/null
+++ b/Migrations/20240629200153_GenerateMakerIdFix.Designer.cs
@@ -0,0 +1,259 @@
+﻿// <auto-generated />
+using System;
+using DeviceContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    [DbContext(typeof(DeviceDb))]
+    [Migration("20240629200153_GenerateMakerIdFix")]
+    partial class GenerateMakerIdFix
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Property<string>("DeviceId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAcess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceId");
+
+                    b.ToTable("Devices");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalRX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalTX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Timestamp")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Histories");
+                });
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MacstoDbs");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Description")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Problems");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("UsedAtClient");
+                });
+
+            modelBuilder.Entity("ModelsFileToUpload.FileToUpload", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<byte[]>("Data")
+                        .IsRequired()
+                        .HasColumnType("BLOB");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("FilesUploads");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", "Maker")
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("Maker");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("SinalHistory")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("Problems")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("UsedAtClients")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Navigation("Problems");
+
+                    b.Navigation("SinalHistory");
+
+                    b.Navigation("UsedAtClients");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/20240629200153_GenerateMakerIdFix.cs b/Migrations/20240629200153_GenerateMakerIdFix.cs
new file mode 100644
index 0000000..e35e792
--- /dev/null
+++ b/Migrations/20240629200153_GenerateMakerIdFix.cs
@@ -0,0 +1,22 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    /// <inheritdoc />
+    public partial class GenerateMakerIdFix : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+
+        }
+    }
+}
diff --git a/Migrations/20240629201225_GenerateMakerIdFix1.Designer.cs b/Migrations/20240629201225_GenerateMakerIdFix1.Designer.cs
new file mode 100644
index 0000000..ee33bd8
--- /dev/null
+++ b/Migrations/20240629201225_GenerateMakerIdFix1.Designer.cs
@@ -0,0 +1,260 @@
+﻿// <auto-generated />
+using System;
+using DeviceContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    [DbContext(typeof(DeviceDb))]
+    [Migration("20240629201225_GenerateMakerIdFix1")]
+    partial class GenerateMakerIdFix1
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Property<string>("DeviceId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAcess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceId");
+
+                    b.ToTable("Devices");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalRX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalTX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Timestamp")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Histories");
+                });
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MacstoDbs");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Description")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Problems");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("UsedAtClient");
+                });
+
+            modelBuilder.Entity("ModelsFileToUpload.FileToUpload", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<byte[]>("Data")
+                        .IsRequired()
+                        .HasColumnType("BLOB");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("FilesUploads");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", "Maker")
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("Maker");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("SinalHistory")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("Problems")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("UsedAtClients")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Navigation("Problems");
+
+                    b.Navigation("SinalHistory");
+
+                    b.Navigation("UsedAtClients");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/20240629201225_GenerateMakerIdFix1.cs b/Migrations/20240629201225_GenerateMakerIdFix1.cs
new file mode 100644
index 0000000..f4ae50c
--- /dev/null
+++ b/Migrations/20240629201225_GenerateMakerIdFix1.cs
@@ -0,0 +1,22 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    /// <inheritdoc />
+    public partial class GenerateMakerIdFix1 : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+
+        }
+    }
+}
diff --git a/Migrations/DeviceDbModelSnapshot.cs b/Migrations/DeviceDbModelSnapshot.cs
index 2cb41f5..0c68b11 100644
--- a/Migrations/DeviceDbModelSnapshot.cs
+++ b/Migrations/DeviceDbModelSnapshot.cs
@@ -39,6 +39,45 @@ namespace MacSave.Migrations
                     b.ToTable("Devices");
                 });
 
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
             modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
                 {
                     b.Property<string>("Id")
@@ -155,6 +194,17 @@ namespace MacSave.Migrations
                     b.ToTable("FilesUploads");
                 });
 
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", "Maker")
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("Maker");
+                });
+
             modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
                 {
                     b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
@@ -196,6 +246,11 @@ namespace MacSave.Migrations
 
                     b.Navigation("UsedAtClients");
                 });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
 #pragma warning restore 612, 618
         }
     }
diff --git a/Models/Categories/DevicesModel.cs b/Models/Categories/DevicesModel.cs
deleted file mode 100644
index 8984a1b..0000000
--- a/Models/Categories/DevicesModel.cs
+++ /dev/null
@@ -1,19 +0,0 @@
-using System.ComponentModel.DataAnnotations;
-using System.ComponentModel.DataAnnotations.Schema;
-using MacSave.Models.Categories.OperationModelEnums;
-
-namespace MacSave.Models.Categories
-{
-    public class DevicesModel
-    {
-        [Key]
-        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
-        public string DeviceId { get; set; }
-
-        public string ModelOfDevice { get; set; }
-
-        public string Ownew { get; set; }
-
-        public OperationModelEnum OperationMode { get; set; } = OperationModelEnum.None;
-    }
-}
diff --git a/Models/Categories/Models of Devices/DeviceCategory.cs b/Models/Categories/Models of Devices/DeviceCategory.cs
new file mode 100644
index 0000000..f99c279
--- /dev/null
+++ b/Models/Categories/Models of Devices/DeviceCategory.cs	
@@ -0,0 +1,26 @@
+using MacSave.Models.Categories;
+using System.ComponentModel.DataAnnotations;
+using System.ComponentModel.DataAnnotations.Schema;
+using System.Text.Json.Serialization;
+using MacSave.Models.Categories.OperationModelEnums;
+
+namespace MacSave.Models.Categories.Models_of_Devices
+{
+    public class DeviceCategory
+    {
+        [Key]
+        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
+        public string DeviceCategoryId { get; set; } = Guid.NewGuid().ToString();
+
+        public string DeviceCategoryName { get; set; }
+
+        //if Operation mode was not provide, then default value is set to NONE, but can change before
+        public OperationModelEnum OperationMode { get; set; } = OperationModelEnum.None;
+
+        [ForeignKey("Maker")]
+        public  string MakerId { get; set; }
+
+        [JsonIgnore]
+        public Maker Maker { get; set; } = null!;
+    }
+}
diff --git a/Models/Categories/Models of Devices/DevicesMaker.cs b/Models/Categories/Models of Devices/DevicesMaker.cs
new file mode 100644
index 0000000..357ba48
--- /dev/null
+++ b/Models/Categories/Models of Devices/DevicesMaker.cs	
@@ -0,0 +1,27 @@
+using System.Collections.Generic;
+using System.ComponentModel.DataAnnotations;
+using System.ComponentModel.DataAnnotations.Schema;
+using System.Text.Json.Serialization;
+using MacSave.Models.Categories.Models_of_Devices;
+
+namespace MacSave.Models.Categories
+{
+    public class Maker
+    {
+
+        [Key]
+        
+        public string MakerId { get; set; } = Guid.NewGuid().ToString();
+
+        public string MakerName { get; set; }
+
+        [JsonIgnore]
+        public ICollection<DeviceCategory> DeviceCategories { get; set; } =
+            new List<DeviceCategory>();
+
+        public void AddDeviceCategory(DeviceCategory deviceCategory)
+        {
+            DeviceCategories.Add(deviceCategory);
+        }
+    }
+}
-- 
2.39.0.windows.2


From 67bca2208b01ce65e6e1f25d985b3f8d341abffe Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sat, 6 Jul 2024 13:07:25 -0300
Subject: [PATCH 03/12] relate category and maker at get all method controller

---
 Context/dbContext.cs                          | 10 +++---
 Controllers/CateriesActions.cs                | 33 +++++++++++++------
 .../Models of Devices/DeviceCategory.cs       | 10 +++---
 3 files changed, 34 insertions(+), 19 deletions(-)

diff --git a/Context/dbContext.cs b/Context/dbContext.cs
index 18c2621..be0b83e 100644
--- a/Context/dbContext.cs
+++ b/Context/dbContext.cs
@@ -52,11 +52,11 @@ namespace DeviceContext
             .Property( e => e.MakerId)
             .ValueGeneratedOnAdd();
 
-            modelBuilder.Entity<Maker>()
-            .HasMany(m => m.DeviceCategories)
-            .WithOne(m => m.Maker)
-            .HasForeignKey(m => m.MakerId)
-            .IsRequired();
+            // modelBuilder.Entity<Maker>()
+            // .HasMany(m => m.DeviceCategories)
+            // .WithOne(m => m.Maker)
+            // .HasForeignKey(m => m.MakerId)
+            // .IsRequired();
 
 
         }
diff --git a/Controllers/CateriesActions.cs b/Controllers/CateriesActions.cs
index 42b4c50..350b533 100644
--- a/Controllers/CateriesActions.cs
+++ b/Controllers/CateriesActions.cs
@@ -18,12 +18,24 @@ namespace MacSave.Controllers
         }
 
         [HttpGet]
-        [Route("/GetAllModels")]
-        public async Task<ActionResult<Maker>> GetAllModels()
+        [Route("/GetAllMakers")]
+        public async Task<ActionResult<Maker>> GetAllMakers()
         {
             try
             {
-                var allMakers = await _db.Makers.ToListAsync();
+                var allMakers = await _db
+                    .Makers.Include(m => m.DeviceCategories).Select(m => new {
+                        m.MakerId,
+                        m.MakerName,
+                        DeviceCategories = m.DeviceCategories.Select(
+                            m => new {
+                                m.DeviceCategoryId, 
+                                m.DeviceCategoryName, 
+                                m.OperationMode
+                            }
+                        ),
+
+                    }).ToListAsync();
                 return Ok(allMakers);
             }
             catch (Exception ex)
@@ -91,6 +103,7 @@ namespace MacSave.Controllers
                 {
                     return BadRequest("Category cannot be empty");
                 }
+
                 if (
                     await _db.DeviceCategories.AnyAsync(x =>
                         x.DeviceCategoryName == category.DeviceCategoryName
@@ -99,7 +112,9 @@ namespace MacSave.Controllers
                 {
                     return BadRequest("Category Already Exist");
                 }
-                if (await _db.Makers.FindAsync(category.MakerId) == null)
+
+                var maker = await _db.Makers.FindAsync(category.MakerId);
+                if (maker == null)
                 {
                     return BadRequest("Owner Is a Not Valid Id");
                 }
@@ -107,22 +122,20 @@ namespace MacSave.Controllers
                 var categoryCleaned = new DeviceCategory
                 {
                     DeviceCategoryName = category.DeviceCategoryName,
-                    MakerId = category.MakerId,
+                    MakerId = maker.MakerId,
                     OperationMode = category.OperationMode,
                     DeviceCategoryId = Guid.NewGuid().ToString()
                 };
-                await _db.DeviceCategories.AddAsync(categoryCleaned);
-                await _db.SaveChangesAsync();
 
-                var makerAdd = new Maker { };
-                makerAdd.AddDeviceCategory(category);
+                await _db.DeviceCategories.AddAsync(categoryCleaned);
+                maker.AddDeviceCategory(categoryCleaned);
                 await _db.SaveChangesAsync();
 
                 return Ok(categoryCleaned);
             }
             catch (Exception ex)
             {
-                return BadRequest(ex);
+                return BadRequest(ex.Message);
             }
         }
 
diff --git a/Models/Categories/Models of Devices/DeviceCategory.cs b/Models/Categories/Models of Devices/DeviceCategory.cs
index f99c279..3a5dab1 100644
--- a/Models/Categories/Models of Devices/DeviceCategory.cs	
+++ b/Models/Categories/Models of Devices/DeviceCategory.cs	
@@ -1,7 +1,7 @@
-using MacSave.Models.Categories;
 using System.ComponentModel.DataAnnotations;
 using System.ComponentModel.DataAnnotations.Schema;
 using System.Text.Json.Serialization;
+using MacSave.Models.Categories;
 using MacSave.Models.Categories.OperationModelEnums;
 
 namespace MacSave.Models.Categories.Models_of_Devices
@@ -18,9 +18,11 @@ namespace MacSave.Models.Categories.Models_of_Devices
         public OperationModelEnum OperationMode { get; set; } = OperationModelEnum.None;
 
         [ForeignKey("Maker")]
-        public  string MakerId { get; set; }
+        public required string MakerId { get; set; }
 
-        [JsonIgnore]
-        public Maker Maker { get; set; } = null!;
+        
+        //comented to avoid error at controller, must be fixed
+        // [JsonIgnore]
+        // public Maker Maker { get; set; } = null!;
     }
 }
-- 
2.39.0.windows.2


From e8eb93cf0c14281fcf651b5a5f2e598180aaef28 Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sun, 7 Jul 2024 17:19:19 -0300
Subject: [PATCH 04/12] create a function to sanitize input params and inject
 them as DI at controller

---
 Controllers/CateriesActions.cs |  7 ++++-
 Funcs/SanetizerInputs.cs       | 56 ++++++++++++++++++++++++++++++++++
 2 files changed, 62 insertions(+), 1 deletion(-)
 create mode 100644 Funcs/SanetizerInputs.cs

diff --git a/Controllers/CateriesActions.cs b/Controllers/CateriesActions.cs
index 350b533..83d4ae3 100644
--- a/Controllers/CateriesActions.cs
+++ b/Controllers/CateriesActions.cs
@@ -3,6 +3,7 @@ using MacSave.Models.Categories;
 using MacSave.Models.Categories.Models_of_Devices;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.EntityFrameworkCore;
+using MacSave.Funcs;
 
 namespace MacSave.Controllers
 {
@@ -11,9 +12,11 @@ namespace MacSave.Controllers
     public class CateriesActions : ControllerBase
     {
         private readonly DeviceDb _db;
+        private readonly SanetizerInputs _sanetizerInputs;
 
-        public CateriesActions(DeviceDb db)
+        public CateriesActions(DeviceDb db, SanetizerInputs sanetizerInputs)
         {
+            _sanetizerInputs = sanetizerInputs;
             _db = db;
         }
 
@@ -75,6 +78,8 @@ namespace MacSave.Controllers
                     return BadRequest("Maker Already Exist");
                 }
 
+
+                
                 var makerCleaned = new Maker
                 {
                     MakerName = maker.MakerName,
diff --git a/Funcs/SanetizerInputs.cs b/Funcs/SanetizerInputs.cs
new file mode 100644
index 0000000..d00a10d
--- /dev/null
+++ b/Funcs/SanetizerInputs.cs
@@ -0,0 +1,56 @@
+using System.Reflection;
+using System.Text.RegularExpressions;
+
+namespace MacSave.Funcs
+{
+    public class SanetizerInputs
+    {
+        private static readonly Regex SanitizeRegex = new("[^a-zA-Z0-9 @.,;:!?-]");
+
+        public static string? InputSanitizer(string input)
+        {
+            if (string.IsNullOrEmpty(input))
+            {
+                return null;
+            }
+
+            return SanitizeRegex.Replace(input, string.Empty);
+        }
+
+        public void IterateProperties<T>(T obj)
+        {
+            if (obj == null)
+            {
+                throw new ArgumentNullException(nameof(obj));
+            }
+
+            Type type = obj.GetType();
+
+            foreach (
+                PropertyInfo property in type.GetProperties(
+                    BindingFlags.Public | BindingFlags.Instance
+                )
+            )
+            {
+                string propertyName = property.Name;
+                object propertyValue = property.GetValue(obj);
+
+                Console.WriteLine("------------------------");
+                Console.WriteLine("\nProperties Without Clean: \n");
+                Console.WriteLine($"Property: {propertyName}, \nValue: {propertyValue} \n");
+
+                Console.WriteLine("------------------------");
+                Console.WriteLine("Start clean items\n");
+
+                string propertyNameClean = InputSanitizer(propertyName);
+                string propertyValueClean = InputSanitizer(
+                    propertyValue?.ToString() ?? string.Empty
+                );
+
+                Console.WriteLine(
+                    $"Clean Property: {propertyNameClean}, \nClean Value: {propertyValueClean}"
+                );
+            }
+        }
+    }
+}
-- 
2.39.0.windows.2


From 32519955d99debaa6bd1d38851a5b04493a49d7e Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sat, 13 Jul 2024 18:25:38 -0300
Subject: [PATCH 05/12] improve sanitizer and inject as DI

---
 Controllers/CateriesActions.cs | 37 +++++++++++++---------
 Funcs/SanetizerInputs.cs       | 56 +++++++++++++++++++++++-----------
 Program.cs                     | 21 +++++++------
 3 files changed, 72 insertions(+), 42 deletions(-)

diff --git a/Controllers/CateriesActions.cs b/Controllers/CateriesActions.cs
index 83d4ae3..42ab490 100644
--- a/Controllers/CateriesActions.cs
+++ b/Controllers/CateriesActions.cs
@@ -1,9 +1,9 @@
 using DeviceContext;
+using MacSave.Funcs.RegexSanitizer;
 using MacSave.Models.Categories;
 using MacSave.Models.Categories.Models_of_Devices;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.EntityFrameworkCore;
-using MacSave.Funcs;
 
 namespace MacSave.Controllers
 {
@@ -27,18 +27,19 @@ namespace MacSave.Controllers
             try
             {
                 var allMakers = await _db
-                    .Makers.Include(m => m.DeviceCategories).Select(m => new {
+                    .Makers.Include(m => m.DeviceCategories)
+                    .Select(m => new
+                    {
                         m.MakerId,
                         m.MakerName,
-                        DeviceCategories = m.DeviceCategories.Select(
-                            m => new {
-                                m.DeviceCategoryId, 
-                                m.DeviceCategoryName, 
-                                m.OperationMode
-                            }
-                        ),
-
-                    }).ToListAsync();
+                        DeviceCategories = m.DeviceCategories.Select(m => new
+                        {
+                            m.DeviceCategoryId,
+                            m.DeviceCategoryName,
+                            m.OperationMode
+                        }),
+                    })
+                    .ToListAsync();
                 return Ok(allMakers);
             }
             catch (Exception ex)
@@ -64,10 +65,12 @@ namespace MacSave.Controllers
 
         [HttpPost]
         [Route("/CreateMaker")]
-        public async Task<ActionResult<Maker>> CreateMaker([FromBody] Maker maker)
+        public async Task<ActionResult<Maker>> CreateMaker([FromBody] Maker makerDirty)
         {
             try
             {
+                var maker = await _sanetizerInputs.IterateProperties(makerDirty, true);
+
                 if (maker == null)
                 {
                     return BadRequest("Maker Cannot be empyt");
@@ -78,8 +81,6 @@ namespace MacSave.Controllers
                     return BadRequest("Maker Already Exist");
                 }
 
-
-                
                 var makerCleaned = new Maker
                 {
                     MakerName = maker.MakerName,
@@ -154,5 +155,13 @@ namespace MacSave.Controllers
             }
             return maker;
         }
+
+        [HttpPost("/CreateMakerTest")]
+        public async Task<ActionResult<Maker>> CreateMakerTest([FromBody] Maker makerTest)
+        {
+            var maker = await _sanetizerInputs.IterateProperties(makerTest , false);
+            return Ok(maker);
+            
+        }
     }
 }
diff --git a/Funcs/SanetizerInputs.cs b/Funcs/SanetizerInputs.cs
index d00a10d..02058c0 100644
--- a/Funcs/SanetizerInputs.cs
+++ b/Funcs/SanetizerInputs.cs
@@ -1,56 +1,76 @@
 using System.Reflection;
 using System.Text.RegularExpressions;
 
-namespace MacSave.Funcs
+namespace MacSave.Funcs.RegexSanitizer
 {
     public class SanetizerInputs
     {
         private static readonly Regex SanitizeRegex = new("[^a-zA-Z0-9 @.,;:!?-]");
 
-        public static string? InputSanitizer(string input)
+        //as private
+        private static string? InputSanitizer(string input)
         {
             if (string.IsNullOrEmpty(input))
             {
                 return null;
             }
 
-            return SanitizeRegex.Replace(input, string.Empty);
+            return SanitizeRegex.Replace(input, string.Empty).Trim();
         }
 
-        public void IterateProperties<T>(T obj)
+        public async Task<T> IterateProperties<T>(T obj, bool ActiveLogginObject)
+            where T : new()
         {
+            T _newObjectGenericClean = new();
             if (obj == null)
             {
                 throw new ArgumentNullException(nameof(obj));
             }
-
             Type type = obj.GetType();
 
+            // iterate whole object and its public properties
             foreach (
                 PropertyInfo property in type.GetProperties(
                     BindingFlags.Public | BindingFlags.Instance
                 )
             )
             {
-                string propertyName = property.Name;
-                object propertyValue = property.GetValue(obj);
+            await Task.Delay(10);
 
-                Console.WriteLine("------------------------");
-                Console.WriteLine("\nProperties Without Clean: \n");
-                Console.WriteLine($"Property: {propertyName}, \nValue: {propertyValue} \n");
-
-                Console.WriteLine("------------------------");
-                Console.WriteLine("Start clean items\n");
+                // get name and value of propertie
+                string propertyName = property.Name;
+                object? propertyValue = property.GetValue(obj);
 
-                string propertyNameClean = InputSanitizer(propertyName);
-                string propertyValueClean = InputSanitizer(
+                // call sanitizer func regex and return clean value
+                string? propertyNameClean = InputSanitizer(propertyName);
+                string? propertyValueClean = InputSanitizer(
                     propertyValue?.ToString() ?? string.Empty
                 );
-
-                Console.WriteLine(
-                    $"Clean Property: {propertyNameClean}, \nClean Value: {propertyValueClean}"
+                
+                //must to check is value if diferent than string
+                
+        
+                //take value to be set at place of dirty field
+                property.SetValue(
+                    _newObjectGenericClean,
+                    Convert.ChangeType(propertyValueClean, property.PropertyType)
                 );
+
+                // if true, loggin is active
+                if (ActiveLogginObject)
+                {
+                    Console.WriteLine("------------------------");
+                    Console.WriteLine("\nProperties Without Clean: \n");
+                    Console.WriteLine($"Property: {propertyName}, \nValue: {propertyValue} \n");
+                    Console.WriteLine("------------------------");
+                    Console.WriteLine("Start clean items\n");
+                    Console.WriteLine(
+                        $"Clean Property: {propertyNameClean}, \nClean Value: {propertyValueClean}"
+                    );
+                }
             }
+
+            return _newObjectGenericClean;
         }
     }
 }
diff --git a/Program.cs b/Program.cs
index d7fa636..e5515bb 100644
--- a/Program.cs
+++ b/Program.cs
@@ -1,17 +1,23 @@
-using Microsoft.EntityFrameworkCore;
 using DeviceContext;
-using MethodsFuncs;
+using MacSave.Funcs.RegexSanitizer;
 using MainDatabaseContext;
+using MethodsFuncs;
+using Microsoft.EntityFrameworkCore;
 
 var builder = WebApplication.CreateBuilder(args);
-builder.Services.AddDbContext<DeviceDb>(opt => opt.UseSqlite("Data Source=C:\\dev\\database\\Workers.db"));
-builder.Services.AddDbContext<MainDatabase>(opt => opt.UseSqlite("Data Source=C:\\dev\\database\\MainDatabase.db"));
+builder.Services.AddDbContext<DeviceDb>(opt =>
+    opt.UseSqlite("Data Source=C:\\dev\\database\\Workers.db")
+);
+builder.Services.AddDbContext<MainDatabase>(opt =>
+    opt.UseSqlite("Data Source=C:\\dev\\database\\MainDatabase.db")
+);
 
 builder.Services.AddCors();
 
 builder.Services.AddDatabaseDeveloperPageExceptionFilter();
 
 builder.Services.AddControllers();
+builder.Services.AddTransient<SanetizerInputs>();
 builder.Services.AddEndpointsApiExplorer();
 builder.Services.AddSwaggerGen();
 
@@ -22,9 +28,7 @@ var app = builder.Build();
 app.UseRouting();
 app.UseCors(builder =>
 {
-    builder.AllowAnyOrigin()
-           .AllowAnyMethod()
-           .AllowAnyHeader();
+    builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader();
 });
 app.MapControllers();
 
@@ -38,7 +42,4 @@ app.UseSwaggerUI(options =>
     options.RoutePrefix = string.Empty;
 });
 
-
-
-
 app.Run();
-- 
2.39.0.windows.2


From 1b2ae4179b3819d8f9dc98736505fb9186a42680 Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sun, 14 Jul 2024 13:50:49 -0300
Subject: [PATCH 06/12] fix before, casting obj to string

---
 Controllers/CateriesActions.cs |  2 +-
 Funcs/SanetizerInputs.cs       | 62 +++++++++++-----------------------
 2 files changed, 20 insertions(+), 44 deletions(-)

diff --git a/Controllers/CateriesActions.cs b/Controllers/CateriesActions.cs
index 42ab490..acfeec4 100644
--- a/Controllers/CateriesActions.cs
+++ b/Controllers/CateriesActions.cs
@@ -159,7 +159,7 @@ namespace MacSave.Controllers
         [HttpPost("/CreateMakerTest")]
         public async Task<ActionResult<Maker>> CreateMakerTest([FromBody] Maker makerTest)
         {
-            var maker = await _sanetizerInputs.IterateProperties(makerTest , false);
+            var maker = await _sanetizerInputs.IterateProperties(makerTest , true);
             return Ok(maker);
             
         }
diff --git a/Funcs/SanetizerInputs.cs b/Funcs/SanetizerInputs.cs
index 02058c0..dc3cdaf 100644
--- a/Funcs/SanetizerInputs.cs
+++ b/Funcs/SanetizerInputs.cs
@@ -1,5 +1,6 @@
 using System.Reflection;
 using System.Text.RegularExpressions;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
 
 namespace MacSave.Funcs.RegexSanitizer
 {
@@ -18,59 +19,34 @@ namespace MacSave.Funcs.RegexSanitizer
             return SanitizeRegex.Replace(input, string.Empty).Trim();
         }
 
-        public async Task<T> IterateProperties<T>(T obj, bool ActiveLogginObject)
-            where T : new()
+        public async Task<T> IterateProperties<T>(T obj, bool activeLogging)
         {
-            T _newObjectGenericClean = new();
-            if (obj == null)
-            {
-                throw new ArgumentNullException(nameof(obj));
-            }
+            // Get type of obj
             Type type = obj.GetType();
 
-            // iterate whole object and its public properties
-            foreach (
-                PropertyInfo property in type.GetProperties(
-                    BindingFlags.Public | BindingFlags.Instance
-                )
-            )
-            {
-            await Task.Delay(10);
+            // Get all properties of the object
+            PropertyInfo[] properties = type.GetProperties();
 
-                // get name and value of propertie
+            foreach (PropertyInfo property in properties)
+            {
+                // Get the name and value of each property
                 string propertyName = property.Name;
-                object? propertyValue = property.GetValue(obj);
+                object propertyValue = property.GetValue(obj);
+                propertyValue.ToString();
+                if(propertyValue != null){
 
-                // call sanitizer func regex and return clean value
-                string? propertyNameClean = InputSanitizer(propertyName);
-                string? propertyValueClean = InputSanitizer(
-                    propertyValue?.ToString() ?? string.Empty
-                );
-                
-                //must to check is value if diferent than string
-                
-        
-                //take value to be set at place of dirty field
-                property.SetValue(
-                    _newObjectGenericClean,
-                    Convert.ChangeType(propertyValueClean, property.PropertyType)
-                );
+                    Console.WriteLine($"\n\n\n{propertyName}: \n{propertyValue} \n\n\n" );
+                   property.SetValue(obj, InputSanitizer(), null);
+                    Console.WriteLine($"\n\n\n{propertyName}: \n{propertyValue} \n\n\n" );
 
-                // if true, loggin is active
-                if (ActiveLogginObject)
-                {
-                    Console.WriteLine("------------------------");
-                    Console.WriteLine("\nProperties Without Clean: \n");
-                    Console.WriteLine($"Property: {propertyName}, \nValue: {propertyValue} \n");
-                    Console.WriteLine("------------------------");
-                    Console.WriteLine("Start clean items\n");
-                    Console.WriteLine(
-                        $"Clean Property: {propertyNameClean}, \nClean Value: {propertyValueClean}"
-                    );
                 }
+
             }
 
-            return _newObjectGenericClean;
+            // Perform any additional processing if required
+
+            // Return the modified object (if any modifications are done)
+            return await Task.FromResult(obj);
         }
     }
 }
-- 
2.39.0.windows.2


From 9fba462e962efff9bfd15c392c9274b47f0002e4 Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sun, 14 Jul 2024 17:07:08 -0300
Subject: [PATCH 07/12] sanitize input, next, search by whole database by
 params to find

---
 Context/dbContext.cs           |  3 +++
 Controllers/CateriesActions.cs | 28 ++++++++--------------
 Funcs/RegexService.cs          | 25 +++++++++++++++++++
 Funcs/SanetizerInputs.cs       | 44 +++++++++++++++++-----------------
 Program.cs                     |  3 ++-
 5 files changed, 62 insertions(+), 41 deletions(-)
 create mode 100644 Funcs/RegexService.cs

diff --git a/Context/dbContext.cs b/Context/dbContext.cs
index be0b83e..63d4c36 100644
--- a/Context/dbContext.cs
+++ b/Context/dbContext.cs
@@ -3,6 +3,7 @@ using MacSave.Models.Categories;
 using MacSave.Models.Categories.Models_of_Devices;
 using MacSave.Models.SinalHistory;
 using MacToDatabaseModel;
+using Microsoft.AspNetCore.Mvc;
 using Microsoft.EntityFrameworkCore;
 using Model.ProblemTreatWrapper;
 using Models.UsedAtWrapper.UsedAtWrapper;
@@ -60,5 +61,7 @@ namespace DeviceContext
 
 
         }
+
+        
     }
 }
diff --git a/Controllers/CateriesActions.cs b/Controllers/CateriesActions.cs
index acfeec4..cb1fe78 100644
--- a/Controllers/CateriesActions.cs
+++ b/Controllers/CateriesActions.cs
@@ -1,5 +1,5 @@
 using DeviceContext;
-using MacSave.Funcs.RegexSanitizer;
+using MacSave.Funcs;
 using MacSave.Models.Categories;
 using MacSave.Models.Categories.Models_of_Devices;
 using Microsoft.AspNetCore.Mvc;
@@ -12,11 +12,11 @@ namespace MacSave.Controllers
     public class CateriesActions : ControllerBase
     {
         private readonly DeviceDb _db;
-        private readonly SanetizerInputs _sanetizerInputs;
+        private readonly RegexService _regexService;
 
-        public CateriesActions(DeviceDb db, SanetizerInputs sanetizerInputs)
+        public CateriesActions(DeviceDb db, RegexService regexService)
         {
-            _sanetizerInputs = sanetizerInputs;
+            _regexService = regexService;
             _db = db;
         }
 
@@ -65,12 +65,10 @@ namespace MacSave.Controllers
 
         [HttpPost]
         [Route("/CreateMaker")]
-        public async Task<ActionResult<Maker>> CreateMaker([FromBody] Maker makerDirty)
+        public async Task<ActionResult<Maker>> CreateMaker([FromBody] Maker maker)
         {
             try
             {
-                var maker = await _sanetizerInputs.IterateProperties(makerDirty, true);
-
                 if (maker == null)
                 {
                     return BadRequest("Maker Cannot be empyt");
@@ -145,23 +143,17 @@ namespace MacSave.Controllers
             }
         }
 
-        [HttpGet("{id}")]
-        public async Task<ActionResult<Maker>> GetMakerById(string id)
+        [HttpGet("/FindMaker/{param}")]
+        public async Task<ActionResult<object>> GetMakerById(string param)
         {
-            var maker = await _db.Makers.FindAsync(id);
+            var maker = await _db
+                .Devices.Include(x => x.Model == param).Select( x => x.Model == param)
+                .ToListAsync();
             if (maker == null)
             {
                 return NotFound("DeviceNotFound");
             }
             return maker;
         }
-
-        [HttpPost("/CreateMakerTest")]
-        public async Task<ActionResult<Maker>> CreateMakerTest([FromBody] Maker makerTest)
-        {
-            var maker = await _sanetizerInputs.IterateProperties(makerTest , true);
-            return Ok(maker);
-            
-        }
     }
 }
diff --git a/Funcs/RegexService.cs b/Funcs/RegexService.cs
new file mode 100644
index 0000000..e80b545
--- /dev/null
+++ b/Funcs/RegexService.cs
@@ -0,0 +1,25 @@
+using System.Text.RegularExpressions;
+using System.Web;
+
+namespace MacSave.Funcs
+{
+    public class RegexService
+    {
+        private static readonly Regex SanitizeRegex = new Regex("[^a-zA-Z0-9 @.,;:!?-]");
+
+        public  string SanitizeInput(string userInput)
+        {
+            var input = userInput;
+            if (string.IsNullOrEmpty(input))
+            {
+                return input;
+            }
+            
+            input = SanitizeRegex.Replace(input, string.Empty);
+
+            input = HttpUtility.HtmlEncode(input);
+             input = input.Replace("'", "''");
+            return input;
+        }
+    }
+}
diff --git a/Funcs/SanetizerInputs.cs b/Funcs/SanetizerInputs.cs
index dc3cdaf..fd9761c 100644
--- a/Funcs/SanetizerInputs.cs
+++ b/Funcs/SanetizerInputs.cs
@@ -19,34 +19,34 @@ namespace MacSave.Funcs.RegexSanitizer
             return SanitizeRegex.Replace(input, string.Empty).Trim();
         }
 
-        public async Task<T> IterateProperties<T>(T obj, bool activeLogging)
-        {
-            // Get type of obj
-            Type type = obj.GetType();
+        // public async Task<T> IterateProperties<T>(T obj, bool activeLogging)
+        // {
+        //     // Get type of obj
+        //     Type type = obj.GetType();
 
-            // Get all properties of the object
-            PropertyInfo[] properties = type.GetProperties();
+        //     // Get all properties of the object
+        //     PropertyInfo[] properties = type.GetProperties();
 
-            foreach (PropertyInfo property in properties)
-            {
-                // Get the name and value of each property
-                string propertyName = property.Name;
-                object propertyValue = property.GetValue(obj);
-                propertyValue.ToString();
-                if(propertyValue != null){
+        //     foreach (PropertyInfo property in properties)
+        //     {
+        //         // Get the name and value of each property
+        //         string propertyName = property.Name;
+        //         object propertyValue = property.GetValue(obj);
+        //         propertyValue.ToString();
+        //         if(propertyValue != null){
 
-                    Console.WriteLine($"\n\n\n{propertyName}: \n{propertyValue} \n\n\n" );
-                   property.SetValue(obj, InputSanitizer(), null);
-                    Console.WriteLine($"\n\n\n{propertyName}: \n{propertyValue} \n\n\n" );
+        //             Console.WriteLine($"\n\n\n{propertyName}: \n{propertyValue} \n\n\n" );
+        //            property.SetValue(obj, InputSanitizer(), null);
+        //             Console.WriteLine($"\n\n\n{propertyName}: \n{propertyValue} \n\n\n" );
 
-                }
+        //         }
 
-            }
+        //     }
 
-            // Perform any additional processing if required
+        //     // Perform any additional processing if required
 
-            // Return the modified object (if any modifications are done)
-            return await Task.FromResult(obj);
-        }
+        //     // Return the modified object (if any modifications are done)
+        //     return await Task.FromResult(obj);
+        // }
     }
 }
diff --git a/Program.cs b/Program.cs
index e5515bb..8b1f9a4 100644
--- a/Program.cs
+++ b/Program.cs
@@ -1,4 +1,5 @@
 using DeviceContext;
+using MacSave.Funcs;
 using MacSave.Funcs.RegexSanitizer;
 using MainDatabaseContext;
 using MethodsFuncs;
@@ -17,7 +18,7 @@ builder.Services.AddCors();
 builder.Services.AddDatabaseDeveloperPageExceptionFilter();
 
 builder.Services.AddControllers();
-builder.Services.AddTransient<SanetizerInputs>();
+builder.Services.AddTransient<RegexService>();
 builder.Services.AddEndpointsApiExplorer();
 builder.Services.AddSwaggerGen();
 
-- 
2.39.0.windows.2


From bb76deb13dbdb126e298df0c8cddcbd96147149d Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sun, 14 Jul 2024 17:44:24 -0300
Subject: [PATCH 08/12] improve query by whole database related

---
 Controllers/CateriesActions.cs | 57 ++++++++++++++++++++++++++++++----
 Funcs/RegexService.cs          |  2 +-
 2 files changed, 52 insertions(+), 7 deletions(-)

diff --git a/Controllers/CateriesActions.cs b/Controllers/CateriesActions.cs
index cb1fe78..8c4117c 100644
--- a/Controllers/CateriesActions.cs
+++ b/Controllers/CateriesActions.cs
@@ -143,17 +143,62 @@ namespace MacSave.Controllers
             }
         }
 
-        [HttpGet("/FindMaker/{param}")]
-        public async Task<ActionResult<object>> GetMakerById(string param)
+        [HttpGet("/FindMaker/{paramDirty}")]
+        public async Task<ActionResult<object>> GetMakerById(string paramDirty)
         {
-            var maker = await _db
-                .Devices.Include(x => x.Model == param).Select( x => x.Model == param)
+            if (paramDirty == null || paramDirty.Length < 5)
+            {
+                return BadRequest("Params length is too small");
+            }
+            var param = _regexService.SanitizeInput(paramDirty);
+
+            var deviceTask = _db
+                .Devices.Where(d => d.Model.Contains(param))
+                .Where(d => d.Mac.Contains(param))
+                .ToListAsync();
+
+            var problemTask = _db
+                .Problems.Where(p => p.Name.Contains(param))
+                .Where(p => p.Description.Contains(param))
                 .ToListAsync();
-            if (maker == null)
+
+            var usedAtTask = _db.UsedAtClient.Where(u => u.Name.Contains(param)).ToListAsync();
+
+            var MakersTask = _db.Makers.Where(h => h.MakerName.Contains(param)).ToListAsync();
+
+            var DeviceCategoriesTaks = _db
+                .DeviceCategories.Where(c => c.DeviceCategoryName.Contains(param))
+                .ToListAsync();
+
+            await Task.WhenAll(deviceTask, problemTask, usedAtTask, MakersTask);
+
+            var deviceResults = await deviceTask;
+            var problemResults = await problemTask;
+            var usedAtResults = await usedAtTask;
+            var MakersTaskResults = await MakersTask;
+            var DeviceCategoriesResults = await DeviceCategoriesTaks;
+
+            var results = new
+            {
+                Devices = deviceResults,
+                Problems = problemResults,
+                UsedAtClients = usedAtResults,
+                Makers = MakersTaskResults,
+                DeviceCategories = DeviceCategoriesResults,
+            };
+
+            if (
+                deviceResults.Count == 0
+                && problemResults.Count == 0
+                && usedAtResults.Count == 0
+                && MakersTaskResults.Count == 0
+                && DeviceCategoriesResults.Count == 0
+            )
             {
                 return NotFound("DeviceNotFound");
             }
-            return maker;
+
+            return Ok(results);
         }
     }
 }
diff --git a/Funcs/RegexService.cs b/Funcs/RegexService.cs
index e80b545..b44a02d 100644
--- a/Funcs/RegexService.cs
+++ b/Funcs/RegexService.cs
@@ -15,7 +15,7 @@ namespace MacSave.Funcs
                 return input;
             }
             
-            input = SanitizeRegex.Replace(input, string.Empty);
+            input = SanitizeRegex.Replace(input, string.Empty).Trim();
 
             input = HttpUtility.HtmlEncode(input);
              input = input.Replace("'", "''");
-- 
2.39.0.windows.2


From a51436c95180c60e80834b2e81e61487a818b414 Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sun, 21 Jul 2024 18:39:00 -0300
Subject: [PATCH 09/12] create a new relationship at model and device

---
 Context/dbContext.cs                          |   6 +
 Controllers/DeviceActionsController.cs        |  31 +-
 ...DeviceCategoryAndImproveGetAll.Designer.cs | 280 ++++++++++++++++++
 ...12436_AddDeviceCategoryAndImproveGetAll.cs |  50 ++++
 Migrations/DeviceDbModelSnapshot.cs           |  26 +-
 .../Models of Devices/DeviceCategory.cs       |  13 +-
 Models/Device.cs                              |   8 +
 7 files changed, 407 insertions(+), 7 deletions(-)
 create mode 100644 Migrations/20240721212436_AddDeviceCategoryAndImproveGetAll.Designer.cs
 create mode 100644 Migrations/20240721212436_AddDeviceCategoryAndImproveGetAll.cs

diff --git a/Context/dbContext.cs b/Context/dbContext.cs
index 63d4c36..33bdc2d 100644
--- a/Context/dbContext.cs
+++ b/Context/dbContext.cs
@@ -53,6 +53,12 @@ namespace DeviceContext
             .Property( e => e.MakerId)
             .ValueGeneratedOnAdd();
 
+            modelBuilder.Entity<DeviceCategory>()
+            .HasMany(e => e.Devices)
+            .WithOne(e => e.DeviceCategory)
+            .HasForeignKey(e => e.DeviceName)
+            .IsRequired();
+
             // modelBuilder.Entity<Maker>()
             // .HasMany(m => m.DeviceCategories)
             // .WithOne(m => m.Maker)
diff --git a/Controllers/DeviceActionsController.cs b/Controllers/DeviceActionsController.cs
index 2375822..bb43764 100644
--- a/Controllers/DeviceActionsController.cs
+++ b/Controllers/DeviceActionsController.cs
@@ -5,8 +5,9 @@ using mac_register.Models.FullDeviceCreate;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.EntityFrameworkCore;
 using Model.ProblemTreatWrapper;
+using MacSave.Funcs;
 using Models.UsedAtWrapper.UsedAtWrapper;
-
+using   MacSave.Models.Categories.Models_of_Devices;
 namespace Controller.DeviceActionsController
 {
     [ApiController]
@@ -14,10 +15,12 @@ namespace Controller.DeviceActionsController
     public class DeviceActionsController : ControllerBase
     {
         private readonly DeviceDb _db;
+        private readonly RegexService _regexService;
 
-        public DeviceActionsController(DeviceDb db)
+        public DeviceActionsController(DeviceDb db, RegexService regexService)
         {
             _db = db;
+            _regexService = regexService;
         }
 
         [HttpGet("GetAllDevices")]
@@ -67,9 +70,20 @@ namespace Controller.DeviceActionsController
 
         [HttpPost("CreateDevice")]
         public async Task<ActionResult<FullDeviceCreate>> CreateDevice(
-            [FromBody] FullDeviceCreate device
+            [FromBody] FullDeviceCreate fullDeviceDiry
         )
         {
+            var device = new FullDeviceCreate{
+             Model = _regexService.SanitizeInput(fullDeviceDiry.Model),
+             Mac = _regexService.SanitizeInput(fullDeviceDiry.Mac),
+             RemoteAcess = fullDeviceDiry.RemoteAcess,
+             Name = _regexService.SanitizeInput(fullDeviceDiry.Name),
+             Description= _regexService.SanitizeInput(fullDeviceDiry.Description),
+             UserName = _regexService.SanitizeInput(fullDeviceDiry.UserName),
+             SinalRX = _regexService.SanitizeInput(fullDeviceDiry.SinalRX),
+             SinalTX = _regexService.SanitizeInput(fullDeviceDiry.SinalTX),
+           };
+
             if (device == null)
             {
                 return BadRequest("Device cannot be null");
@@ -77,6 +91,12 @@ namespace Controller.DeviceActionsController
 
             try
             {
+                //  !!! FIND DDIRY PARAM 
+                var deviceCategory = await _db.DeviceCategories.FindAsync(fullDeviceDiry.Model);
+                if( deviceCategory == null){
+                    return BadRequest("Invalid Device Model");
+                }
+
                 //creating a device and save it
                 var deviceMac = new DeviceCreate
                 {
@@ -112,6 +132,11 @@ namespace Controller.DeviceActionsController
                 };
                 deviceMac.UsedAtClients.Add(usedAt);
 
+
+                deviceCategory.AddDeviceCategory(deviceMac);
+                await _db.SaveChangesAsync();
+
+
                 await _db.SaveChangesAsync();
 
                 var responde = new
diff --git a/Migrations/20240721212436_AddDeviceCategoryAndImproveGetAll.Designer.cs b/Migrations/20240721212436_AddDeviceCategoryAndImproveGetAll.Designer.cs
new file mode 100644
index 0000000..3ba994e
--- /dev/null
+++ b/Migrations/20240721212436_AddDeviceCategoryAndImproveGetAll.Designer.cs
@@ -0,0 +1,280 @@
+﻿// <auto-generated />
+using System;
+using DeviceContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    [DbContext(typeof(DeviceDb))]
+    [Migration("20240721212436_AddDeviceCategoryAndImproveGetAll")]
+    partial class AddDeviceCategoryAndImproveGetAll
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Property<string>("DeviceId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAcess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceId");
+
+                    b.HasIndex("DeviceName");
+
+                    b.ToTable("Devices");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalRX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalTX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Timestamp")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Histories");
+                });
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MacstoDbs");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Description")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Problems");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("UsedAtClient");
+                });
+
+            modelBuilder.Entity("ModelsFileToUpload.FileToUpload", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<byte[]>("Data")
+                        .IsRequired()
+                        .HasColumnType("BLOB");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("FilesUploads");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", "DeviceCategory")
+                        .WithMany("Devices")
+                        .HasForeignKey("DeviceName")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCategory");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", null)
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("SinalHistory")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("Problems")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("UsedAtClients")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Navigation("Problems");
+
+                    b.Navigation("SinalHistory");
+
+                    b.Navigation("UsedAtClients");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Navigation("Devices");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/20240721212436_AddDeviceCategoryAndImproveGetAll.cs b/Migrations/20240721212436_AddDeviceCategoryAndImproveGetAll.cs
new file mode 100644
index 0000000..2ac0ebd
--- /dev/null
+++ b/Migrations/20240721212436_AddDeviceCategoryAndImproveGetAll.cs
@@ -0,0 +1,50 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    /// <inheritdoc />
+    public partial class AddDeviceCategoryAndImproveGetAll : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.AddColumn<string>(
+                name: "DeviceName",
+                table: "Devices",
+                type: "TEXT",
+                nullable: false,
+                defaultValue: "");
+
+            migrationBuilder.CreateIndex(
+                name: "IX_Devices_DeviceName",
+                table: "Devices",
+                column: "DeviceName");
+
+            migrationBuilder.AddForeignKey(
+                name: "FK_Devices_DeviceCategories_DeviceName",
+                table: "Devices",
+                column: "DeviceName",
+                principalTable: "DeviceCategories",
+                principalColumn: "DeviceCategoryId",
+                onDelete: ReferentialAction.Cascade);
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_Devices_DeviceCategories_DeviceName",
+                table: "Devices");
+
+            migrationBuilder.DropIndex(
+                name: "IX_Devices_DeviceName",
+                table: "Devices");
+
+            migrationBuilder.DropColumn(
+                name: "DeviceName",
+                table: "Devices");
+        }
+    }
+}
diff --git a/Migrations/DeviceDbModelSnapshot.cs b/Migrations/DeviceDbModelSnapshot.cs
index 0c68b11..466c100 100644
--- a/Migrations/DeviceDbModelSnapshot.cs
+++ b/Migrations/DeviceDbModelSnapshot.cs
@@ -23,6 +23,10 @@ namespace MacSave.Migrations
                         .ValueGeneratedOnAdd()
                         .HasColumnType("TEXT");
 
+                    b.Property<string>("DeviceName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
                     b.Property<string>("Mac")
                         .IsRequired()
                         .HasColumnType("TEXT");
@@ -36,6 +40,8 @@ namespace MacSave.Migrations
 
                     b.HasKey("DeviceId");
 
+                    b.HasIndex("DeviceName");
+
                     b.ToTable("Devices");
                 });
 
@@ -194,15 +200,24 @@ namespace MacSave.Migrations
                     b.ToTable("FilesUploads");
                 });
 
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", "DeviceCategory")
+                        .WithMany("Devices")
+                        .HasForeignKey("DeviceName")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCategory");
+                });
+
             modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
                 {
-                    b.HasOne("MacSave.Models.Categories.Maker", "Maker")
+                    b.HasOne("MacSave.Models.Categories.Maker", null)
                         .WithMany("DeviceCategories")
                         .HasForeignKey("MakerId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
-
-                    b.Navigation("Maker");
                 });
 
             modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
@@ -251,6 +266,11 @@ namespace MacSave.Migrations
                 {
                     b.Navigation("DeviceCategories");
                 });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Navigation("Devices");
+                });
 #pragma warning restore 612, 618
         }
     }
diff --git a/Models/Categories/Models of Devices/DeviceCategory.cs b/Models/Categories/Models of Devices/DeviceCategory.cs
index 3a5dab1..cc1b565 100644
--- a/Models/Categories/Models of Devices/DeviceCategory.cs	
+++ b/Models/Categories/Models of Devices/DeviceCategory.cs	
@@ -1,6 +1,7 @@
 using System.ComponentModel.DataAnnotations;
 using System.ComponentModel.DataAnnotations.Schema;
 using System.Text.Json.Serialization;
+using DeviceModel;
 using MacSave.Models.Categories;
 using MacSave.Models.Categories.OperationModelEnums;
 
@@ -8,6 +9,7 @@ namespace MacSave.Models.Categories.Models_of_Devices
 {
     public class DeviceCategory
     {
+        
         [Key]
         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
         public string DeviceCategoryId { get; set; } = Guid.NewGuid().ToString();
@@ -20,9 +22,18 @@ namespace MacSave.Models.Categories.Models_of_Devices
         [ForeignKey("Maker")]
         public required string MakerId { get; set; }
 
-        
         //comented to avoid error at controller, must be fixed
         // [JsonIgnore]
         // public Maker Maker { get; set; } = null!;
+
+        
+        
+        [JsonIgnore]
+        public ICollection<DeviceCreate> Devices { get; set; } = new List<DeviceCreate>();
+
+        public void AddDeviceCategory(DeviceCreate deviceCreate)
+        {
+            Devices.Add(deviceCreate);
+        }
     }
 }
diff --git a/Models/Device.cs b/Models/Device.cs
index 664b016..12e4cd0 100644
--- a/Models/Device.cs
+++ b/Models/Device.cs
@@ -2,6 +2,7 @@ using System.Collections.Generic;
 using System.ComponentModel.DataAnnotations;
 using System.ComponentModel.DataAnnotations.Schema;
 using System.Text.Json.Serialization;
+using MacSave.Models.Categories.Models_of_Devices;
 using MacSave.Models.SinalHistory;
 using Model.ProblemTreatWrapper;
 using Models.UsedAtWrapper.UsedAtWrapper;
@@ -18,6 +19,13 @@ public class DeviceCreate
     public string Mac { get; set; } = string.Empty;
     public bool RemoteAcess { get; set; } = false;
 
+    //reference Device Category
+    [ForeignKey("DeviceCategory")]
+    public string DeviceName { get; set; }
+
+    [JsonIgnore]
+    public DeviceCategory DeviceCategory { get; set; } = null!;
+
     [JsonIgnore]
     public ICollection<ProblemTreatWrapper> Problems { get; set; } =
         new List<ProblemTreatWrapper>();
-- 
2.39.0.windows.2


From 51b39f33e7053ad7801a2f69291a77be7fafe549 Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sat, 27 Jul 2024 10:00:30 -0300
Subject: [PATCH 10/12] move getdevicebyid to devicecontrolleractions

---
 Controllers/CateriesActions.cs         | 58 +-------------------
 Controllers/DeviceActionsController.cs | 74 +++++++++++++++++++++++---
 2 files changed, 69 insertions(+), 63 deletions(-)

diff --git a/Controllers/CateriesActions.cs b/Controllers/CateriesActions.cs
index 8c4117c..248bf78 100644
--- a/Controllers/CateriesActions.cs
+++ b/Controllers/CateriesActions.cs
@@ -143,62 +143,6 @@ namespace MacSave.Controllers
             }
         }
 
-        [HttpGet("/FindMaker/{paramDirty}")]
-        public async Task<ActionResult<object>> GetMakerById(string paramDirty)
-        {
-            if (paramDirty == null || paramDirty.Length < 5)
-            {
-                return BadRequest("Params length is too small");
-            }
-            var param = _regexService.SanitizeInput(paramDirty);
-
-            var deviceTask = _db
-                .Devices.Where(d => d.Model.Contains(param))
-                .Where(d => d.Mac.Contains(param))
-                .ToListAsync();
-
-            var problemTask = _db
-                .Problems.Where(p => p.Name.Contains(param))
-                .Where(p => p.Description.Contains(param))
-                .ToListAsync();
-
-            var usedAtTask = _db.UsedAtClient.Where(u => u.Name.Contains(param)).ToListAsync();
-
-            var MakersTask = _db.Makers.Where(h => h.MakerName.Contains(param)).ToListAsync();
-
-            var DeviceCategoriesTaks = _db
-                .DeviceCategories.Where(c => c.DeviceCategoryName.Contains(param))
-                .ToListAsync();
-
-            await Task.WhenAll(deviceTask, problemTask, usedAtTask, MakersTask);
-
-            var deviceResults = await deviceTask;
-            var problemResults = await problemTask;
-            var usedAtResults = await usedAtTask;
-            var MakersTaskResults = await MakersTask;
-            var DeviceCategoriesResults = await DeviceCategoriesTaks;
-
-            var results = new
-            {
-                Devices = deviceResults,
-                Problems = problemResults,
-                UsedAtClients = usedAtResults,
-                Makers = MakersTaskResults,
-                DeviceCategories = DeviceCategoriesResults,
-            };
-
-            if (
-                deviceResults.Count == 0
-                && problemResults.Count == 0
-                && usedAtResults.Count == 0
-                && MakersTaskResults.Count == 0
-                && DeviceCategoriesResults.Count == 0
-            )
-            {
-                return NotFound("DeviceNotFound");
-            }
-
-            return Ok(results);
-        }
+        
     }
 }
diff --git a/Controllers/DeviceActionsController.cs b/Controllers/DeviceActionsController.cs
index 2375822..30a253b 100644
--- a/Controllers/DeviceActionsController.cs
+++ b/Controllers/DeviceActionsController.cs
@@ -1,11 +1,12 @@
 using DeviceContext;
-using MacSave.Models.SinalHistory;
 using DeviceModel;
+using MacSave.Models.SinalHistory;
 using mac_register.Models.FullDeviceCreate;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.EntityFrameworkCore;
 using Model.ProblemTreatWrapper;
 using Models.UsedAtWrapper.UsedAtWrapper;
+using MacSave.Funcs;
 
 namespace Controller.DeviceActionsController
 {
@@ -14,9 +15,10 @@ namespace Controller.DeviceActionsController
     public class DeviceActionsController : ControllerBase
     {
         private readonly DeviceDb _db;
-
-        public DeviceActionsController(DeviceDb db)
+        private readonly RegexService _regexService;
+        public DeviceActionsController(DeviceDb db, RegexService regexService)
         {
+            _regexService = regexService;
             _db = db;
         }
 
@@ -48,7 +50,8 @@ namespace Controller.DeviceActionsController
                             u.Name,
                             u.DeviceId
                         }),
-                        SinalHistory = d.SinalHistory.Select(s => new{
+                        SinalHistory = d.SinalHistory.Select(s => new
+                        {
                             s.Id,
                             s.SinalRX,
                             s.SinalTX,
@@ -65,6 +68,64 @@ namespace Controller.DeviceActionsController
             }
         }
 
+        [HttpGet("/SearchDevices/{paramDirty}")]
+        public async Task<ActionResult<object>> SearchDevices(string paramDirty)
+        {
+            if (paramDirty == null || paramDirty.Length < 5)
+            {
+                return BadRequest("Params length is too small");
+            }
+            var param = _regexService.SanitizeInput(paramDirty);
+
+            var deviceTask = _db
+                .Devices.Where(d => d.Model.Contains(param))
+                .Where(d => d.Mac.Contains(param))
+                .ToListAsync();
+
+            var problemTask = _db
+                .Problems.Where(p => p.Name.Contains(param))
+                .Where(p => p.Description.Contains(param))
+                .ToListAsync();
+
+            var usedAtTask = _db.UsedAtClient.Where(u => u.Name.Contains(param)).ToListAsync();
+
+            var MakersTask = _db.Makers.Where(h => h.MakerName.Contains(param)).ToListAsync();
+
+            var DeviceCategoriesTaks = _db
+                .DeviceCategories.Where(c => c.DeviceCategoryName.Contains(param))
+                .ToListAsync();
+
+            await Task.WhenAll(deviceTask, problemTask, usedAtTask, MakersTask);
+
+            var deviceResults = await deviceTask;
+            var problemResults = await problemTask;
+            var usedAtResults = await usedAtTask;
+            var MakersTaskResults = await MakersTask;
+            var DeviceCategoriesResults = await DeviceCategoriesTaks;
+
+            var results = new
+            {
+                Devices = deviceResults,
+                Problems = problemResults,
+                UsedAtClients = usedAtResults,
+                Makers = MakersTaskResults,
+                DeviceCategories = DeviceCategoriesResults,
+            };
+
+            if (
+                deviceResults.Count == 0
+                && problemResults.Count == 0
+                && usedAtResults.Count == 0
+                && MakersTaskResults.Count == 0
+                && DeviceCategoriesResults.Count == 0
+            )
+            {
+                return NotFound("DeviceNotFound");
+            }
+
+            return Ok(results);
+        }
+
         [HttpPost("CreateDevice")]
         public async Task<ActionResult<FullDeviceCreate>> CreateDevice(
             [FromBody] FullDeviceCreate device
@@ -84,8 +145,6 @@ namespace Controller.DeviceActionsController
                     Mac = device.Mac,
                     RemoteAcess = device.RemoteAcess,
                 };
-                await _db.Devices.AddAsync(deviceMac);
-                await _db.SaveChangesAsync();
 
                 //instance a new problem and save it
                 var problem = new ProblemTreatWrapper
@@ -95,6 +154,7 @@ namespace Controller.DeviceActionsController
                     DeviceId = deviceMac.DeviceId
                 };
                 deviceMac.Problems.Add(problem);
+                await _db.Problems.AddAsync(problem);
 
                 var sinalHistory = new SinalHistory
                 {
@@ -110,6 +170,8 @@ namespace Controller.DeviceActionsController
                     Name = device.UserName,
                     DeviceId = deviceMac.DeviceId
                 };
+                await _db.Devices.AddAsync(deviceMac);
+                await _db.SaveChangesAsync();
                 deviceMac.UsedAtClients.Add(usedAt);
 
                 await _db.SaveChangesAsync();
-- 
2.39.0.windows.2


From 24c8b53495c03a20dcdfdeb6b812732393c72a5c Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sat, 27 Jul 2024 13:34:47 -0300
Subject: [PATCH 11/12] <bug>, link device at model

---
 Controllers/DeviceActionsController.cs        |  80 ++---
 Migrations/20240727131758_ReDoDb.Designer.cs  | 280 ++++++++++++++++++
 Migrations/20240727131758_ReDoDb.cs           |  22 ++
 ...40727151812_RenameDeviceTables.Designer.cs | 280 ++++++++++++++++++
 .../20240727151812_RenameDeviceTables.cs      |  38 +++
 Migrations/DeviceDbModelSnapshot.cs           |   6 +-
 .../Models of Devices/DeviceCategory.cs       |   5 +-
 Models/FullDeviceCreate/FullDeviceCreate.cs   |   4 +-
 .../ProblemTreatWrapper/ProblemListWrapper.cs |   4 +-
 9 files changed, 675 insertions(+), 44 deletions(-)
 create mode 100644 Migrations/20240727131758_ReDoDb.Designer.cs
 create mode 100644 Migrations/20240727131758_ReDoDb.cs
 create mode 100644 Migrations/20240727151812_RenameDeviceTables.Designer.cs
 create mode 100644 Migrations/20240727151812_RenameDeviceTables.cs

diff --git a/Controllers/DeviceActionsController.cs b/Controllers/DeviceActionsController.cs
index e3f7bc6..97248eb 100644
--- a/Controllers/DeviceActionsController.cs
+++ b/Controllers/DeviceActionsController.cs
@@ -1,13 +1,15 @@
+using System.Linq;
 using DeviceContext;
 using DeviceModel;
+using MacSave.Funcs;
+using MacSave.Models.Categories.Models_of_Devices;
 using MacSave.Models.SinalHistory;
 using mac_register.Models.FullDeviceCreate;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.EntityFrameworkCore;
 using Model.ProblemTreatWrapper;
-using MacSave.Funcs;
 using Models.UsedAtWrapper.UsedAtWrapper;
-using   MacSave.Models.Categories.Models_of_Devices;
+
 namespace Controller.DeviceActionsController
 {
     [ApiController]
@@ -16,6 +18,7 @@ namespace Controller.DeviceActionsController
     {
         private readonly DeviceDb _db;
         private readonly RegexService _regexService;
+
         public DeviceActionsController(DeviceDb db, RegexService regexService)
         {
             _regexService = regexService;
@@ -41,8 +44,8 @@ namespace Controller.DeviceActionsController
                         Problems = d.Problems.Select(p => new
                         {
                             p.Id,
-                            p.Name,
-                            p.Description,
+                            p.ProblemName,
+                            p.ProblemDescription,
                             p.DeviceId
                         }),
                         UsedAtClients = d.UsedAtClients.Select(u => new
@@ -84,8 +87,8 @@ namespace Controller.DeviceActionsController
                 .ToListAsync();
 
             var problemTask = _db
-                .Problems.Where(p => p.Name.Contains(param))
-                .Where(p => p.Description.Contains(param))
+                .Problems.Where(p => p.ProblemName.Contains(param))
+                .Where(p => p.ProblemDescription.Contains(param))
                 .ToListAsync();
 
             var usedAtTask = _db.UsedAtClient.Where(u => u.Name.Contains(param)).ToListAsync();
@@ -128,33 +131,43 @@ namespace Controller.DeviceActionsController
         }
 
         [HttpPost("CreateDevice")]
-        public async Task<ActionResult<FullDeviceCreate>> CreateDevice(
+        //return to FullDeviceCreate
+        public async Task<ActionResult<object>> CreateDevice(
             [FromBody] FullDeviceCreate fullDeviceDiry
         )
         {
-            var device = new FullDeviceCreate{
-             Model = _regexService.SanitizeInput(fullDeviceDiry.Model),
-             Mac = _regexService.SanitizeInput(fullDeviceDiry.Mac),
-             RemoteAcess = fullDeviceDiry.RemoteAcess,
-             Name = _regexService.SanitizeInput(fullDeviceDiry.Name),
-             Description= _regexService.SanitizeInput(fullDeviceDiry.Description),
-             UserName = _regexService.SanitizeInput(fullDeviceDiry.UserName),
-             SinalRX = _regexService.SanitizeInput(fullDeviceDiry.SinalRX),
-             SinalTX = _regexService.SanitizeInput(fullDeviceDiry.SinalTX),
-           };
-
-            if (device == null)
+            if (fullDeviceDiry == null)
             {
                 return BadRequest("Device cannot be null");
             }
 
+            var device = new FullDeviceCreate
+            {
+                Model = _regexService.SanitizeInput(fullDeviceDiry.Model),
+                Mac = _regexService.SanitizeInput(fullDeviceDiry.Mac),
+                RemoteAcess = fullDeviceDiry.RemoteAcess,
+                ProblemName = _regexService.SanitizeInput(fullDeviceDiry.ProblemName),
+                ProblemDescription = _regexService.SanitizeInput(fullDeviceDiry.ProblemDescription),
+                UserName = _regexService.SanitizeInput(fullDeviceDiry.UserName),
+                SinalRX = _regexService.SanitizeInput(fullDeviceDiry.SinalRX),
+                SinalTX = _regexService.SanitizeInput(fullDeviceDiry.SinalTX),
+            };
+
             try
             {
-                //  !!! FIND DDIRY PARAM 
-                var deviceCategory = await _db.DeviceCategories.FindAsync(fullDeviceDiry.Model);
-                if( deviceCategory == null){
-                    return BadRequest("Invalid Device Model");
-                }
+                //get maker id to device category
+                var deviceCategory = await _db.DeviceCategories.FirstOrDefaultAsync(dc =>
+                    dc.DeviceCategoryName == "teste"
+                );
+
+                // if (deviceCategory == null)
+                // {
+                //     return BadRequest("Device Name Not Found!");
+                // }
+
+                //  !!! FIND DDIRY PARAM
+                //check if is null
+               
 
                 //creating a device and save it
                 var deviceMac = new DeviceCreate
@@ -162,13 +175,16 @@ namespace Controller.DeviceActionsController
                     Model = device.Model,
                     Mac = device.Mac,
                     RemoteAcess = device.RemoteAcess,
+                    DeviceName = "teste",
                 };
+                await _db.Devices.AddAsync(deviceMac);
+                await _db.SaveChangesAsync();
 
                 //instance a new problem and save it
                 var problem = new ProblemTreatWrapper
                 {
-                    Name = device.Name,
-                    Description = device.Description,
+                    ProblemName = device.ProblemName,
+                    ProblemDescription = device.ProblemDescription,
                     DeviceId = deviceMac.DeviceId
                 };
                 deviceMac.Problems.Add(problem);
@@ -188,16 +204,10 @@ namespace Controller.DeviceActionsController
                     Name = device.UserName,
                     DeviceId = deviceMac.DeviceId
                 };
-                await _db.Devices.AddAsync(deviceMac);
-                await _db.SaveChangesAsync();
                 deviceMac.UsedAtClients.Add(usedAt);
 
-
-                deviceCategory.AddDeviceCategory(deviceMac);
-                await _db.SaveChangesAsync();
-
-
-                await _db.SaveChangesAsync();
+                // deviceCategory.AddDeviceToCategory(deviceMac);
+                // await _db.SaveChangesAsync();
 
                 var responde = new
                 {
@@ -210,7 +220,7 @@ namespace Controller.DeviceActionsController
             }
             catch (Exception ex)
             {
-                return BadRequest($"Failed to create device: {ex.Message}");
+                return BadRequest($"Failed to create device: {ex.Message}, {ex.StackTrace}, {ex.GetBaseException()}");	
             }
         }
     }
diff --git a/Migrations/20240727131758_ReDoDb.Designer.cs b/Migrations/20240727131758_ReDoDb.Designer.cs
new file mode 100644
index 0000000..7518b72
--- /dev/null
+++ b/Migrations/20240727131758_ReDoDb.Designer.cs
@@ -0,0 +1,280 @@
+﻿// <auto-generated />
+using System;
+using DeviceContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    [DbContext(typeof(DeviceDb))]
+    [Migration("20240727131758_ReDoDb")]
+    partial class ReDoDb
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Property<string>("DeviceId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAcess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceId");
+
+                    b.HasIndex("DeviceName");
+
+                    b.ToTable("Devices");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalRX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalTX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Timestamp")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Histories");
+                });
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MacstoDbs");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Description")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Problems");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("UsedAtClient");
+                });
+
+            modelBuilder.Entity("ModelsFileToUpload.FileToUpload", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<byte[]>("Data")
+                        .IsRequired()
+                        .HasColumnType("BLOB");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("FilesUploads");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", "DeviceCategory")
+                        .WithMany("Devices")
+                        .HasForeignKey("DeviceName")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCategory");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", null)
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("SinalHistory")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("Problems")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("UsedAtClients")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Navigation("Problems");
+
+                    b.Navigation("SinalHistory");
+
+                    b.Navigation("UsedAtClients");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Navigation("Devices");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/20240727131758_ReDoDb.cs b/Migrations/20240727131758_ReDoDb.cs
new file mode 100644
index 0000000..ca8d179
--- /dev/null
+++ b/Migrations/20240727131758_ReDoDb.cs
@@ -0,0 +1,22 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    /// <inheritdoc />
+    public partial class ReDoDb : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+
+        }
+    }
+}
diff --git a/Migrations/20240727151812_RenameDeviceTables.Designer.cs b/Migrations/20240727151812_RenameDeviceTables.Designer.cs
new file mode 100644
index 0000000..21bf85e
--- /dev/null
+++ b/Migrations/20240727151812_RenameDeviceTables.Designer.cs
@@ -0,0 +1,280 @@
+﻿// <auto-generated />
+using System;
+using DeviceContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    [DbContext(typeof(DeviceDb))]
+    [Migration("20240727151812_RenameDeviceTables")]
+    partial class RenameDeviceTables
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Property<string>("DeviceId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAcess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceId");
+
+                    b.HasIndex("DeviceName");
+
+                    b.ToTable("Devices");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalRX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalTX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Timestamp")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Histories");
+                });
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MacstoDbs");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("ProblemDescription")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("ProblemName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Problems");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("UsedAtClient");
+                });
+
+            modelBuilder.Entity("ModelsFileToUpload.FileToUpload", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<byte[]>("Data")
+                        .IsRequired()
+                        .HasColumnType("BLOB");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("FilesUploads");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", "DeviceCategory")
+                        .WithMany("Devices")
+                        .HasForeignKey("DeviceName")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCategory");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", null)
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("SinalHistory")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("Problems")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("UsedAtClients")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Navigation("Problems");
+
+                    b.Navigation("SinalHistory");
+
+                    b.Navigation("UsedAtClients");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Navigation("Devices");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/20240727151812_RenameDeviceTables.cs b/Migrations/20240727151812_RenameDeviceTables.cs
new file mode 100644
index 0000000..a09b295
--- /dev/null
+++ b/Migrations/20240727151812_RenameDeviceTables.cs
@@ -0,0 +1,38 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    /// <inheritdoc />
+    public partial class RenameDeviceTables : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.RenameColumn(
+                name: "Name",
+                table: "Problems",
+                newName: "ProblemName");
+
+            migrationBuilder.RenameColumn(
+                name: "Description",
+                table: "Problems",
+                newName: "ProblemDescription");
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.RenameColumn(
+                name: "ProblemName",
+                table: "Problems",
+                newName: "Name");
+
+            migrationBuilder.RenameColumn(
+                name: "ProblemDescription",
+                table: "Problems",
+                newName: "Description");
+        }
+    }
+}
diff --git a/Migrations/DeviceDbModelSnapshot.cs b/Migrations/DeviceDbModelSnapshot.cs
index 466c100..2321718 100644
--- a/Migrations/DeviceDbModelSnapshot.cs
+++ b/Migrations/DeviceDbModelSnapshot.cs
@@ -141,15 +141,15 @@ namespace MacSave.Migrations
                         .ValueGeneratedOnAdd()
                         .HasColumnType("TEXT");
 
-                    b.Property<string>("Description")
+                    b.Property<string>("DeviceId")
                         .IsRequired()
                         .HasColumnType("TEXT");
 
-                    b.Property<string>("DeviceId")
+                    b.Property<string>("ProblemDescription")
                         .IsRequired()
                         .HasColumnType("TEXT");
 
-                    b.Property<string>("Name")
+                    b.Property<string>("ProblemName")
                         .IsRequired()
                         .HasColumnType("TEXT");
 
diff --git a/Models/Categories/Models of Devices/DeviceCategory.cs b/Models/Categories/Models of Devices/DeviceCategory.cs
index cc1b565..b343d46 100644
--- a/Models/Categories/Models of Devices/DeviceCategory.cs	
+++ b/Models/Categories/Models of Devices/DeviceCategory.cs	
@@ -9,7 +9,8 @@ namespace MacSave.Models.Categories.Models_of_Devices
 {
     public class DeviceCategory
     {
-        
+       
+
         [Key]
         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
         public string DeviceCategoryId { get; set; } = Guid.NewGuid().ToString();
@@ -31,7 +32,7 @@ namespace MacSave.Models.Categories.Models_of_Devices
         [JsonIgnore]
         public ICollection<DeviceCreate> Devices { get; set; } = new List<DeviceCreate>();
 
-        public void AddDeviceCategory(DeviceCreate deviceCreate)
+        public void AddDeviceToCategory(DeviceCreate deviceCreate)
         {
             Devices.Add(deviceCreate);
         }
diff --git a/Models/FullDeviceCreate/FullDeviceCreate.cs b/Models/FullDeviceCreate/FullDeviceCreate.cs
index d4aa88b..84089d5 100644
--- a/Models/FullDeviceCreate/FullDeviceCreate.cs
+++ b/Models/FullDeviceCreate/FullDeviceCreate.cs
@@ -15,8 +15,8 @@ namespace mac_register.Models.FullDeviceCreate
         public bool RemoteAcess { get; set; }
 
         //map array of the problems that come from array of params
-        public string Name { get; set; }
-        public string Description { get; set; }
+        public string ProblemName { get; set; }
+        public string ProblemDescription { get; set; }
 
         //map array of the old users that come from array of params
         public string UserName { get; set; }
diff --git a/Models/ProblemTreatWrapper/ProblemListWrapper.cs b/Models/ProblemTreatWrapper/ProblemListWrapper.cs
index 64ce3fe..68091e1 100644
--- a/Models/ProblemTreatWrapper/ProblemListWrapper.cs
+++ b/Models/ProblemTreatWrapper/ProblemListWrapper.cs
@@ -11,8 +11,8 @@ namespace Model.ProblemTreatWrapper
         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
         public string Id { get; set; }
 
-        public string Name { get; set; } = string.Empty;
-        public string Description { get; set; } = string.Empty;
+        public string ProblemName { get; set; } = string.Empty;
+        public string ProblemDescription { get; set; } = string.Empty;
 
         [ForeignKey("DeviceCreate")]
         public required string DeviceId { get; set; }
-- 
2.39.0.windows.2


From e1e91d0329b2c7531923fc0f56fe2ec46cbe8d11 Mon Sep 17 00:00:00 2001
From: matheusjean28 <matheusjean28@gmail.com>
Date: Sun, 4 Aug 2024 17:18:00 -0300
Subject: [PATCH 12/12] problem at create new device

---
 Context/dbContext.cs                          |   2 +-
 Controllers/DeviceActionsController.cs        | 232 ++++++++++-----
 ...4163557_relationshipCorrection.Designer.cs | 280 ++++++++++++++++++
 .../20240804163557_relationshipCorrection.cs  |  22 ++
 ...8_deviceCategoryNameCorrection.Designer.cs | 280 ++++++++++++++++++
 ...0804170828_deviceCategoryNameCorrection.cs |  62 ++++
 ...4194240_changeDeviceCategoryId.Designer.cs | 280 ++++++++++++++++++
 .../20240804194240_changeDeviceCategoryId.cs  |  62 ++++
 Migrations/DeviceDbModelSnapshot.cs           |   6 +-
 ...4163626_relationshipCorrection.Designer.cs |  47 +++
 .../20240804163626_relationshipCorrection.cs  |  36 +++
 ...1_deviceCategoryNameCorrection.Designer.cs |  47 +++
 ...0804170841_deviceCategoryNameCorrection.cs |  22 ++
 .../MainDatabaseModelSnapshot.cs              |  44 +++
 .../Models of Devices/DeviceCategory.cs       |   6 +-
 Models/Device.cs                              |   2 +-
 Models/FullDeviceCreate/FullDeviceCreate.cs   |   5 +-
 17 files changed, 1349 insertions(+), 86 deletions(-)
 create mode 100644 Migrations/20240804163557_relationshipCorrection.Designer.cs
 create mode 100644 Migrations/20240804163557_relationshipCorrection.cs
 create mode 100644 Migrations/20240804170828_deviceCategoryNameCorrection.Designer.cs
 create mode 100644 Migrations/20240804170828_deviceCategoryNameCorrection.cs
 create mode 100644 Migrations/20240804194240_changeDeviceCategoryId.Designer.cs
 create mode 100644 Migrations/20240804194240_changeDeviceCategoryId.cs
 create mode 100644 Migrations/MainDatabaseMigrations/20240804163626_relationshipCorrection.Designer.cs
 create mode 100644 Migrations/MainDatabaseMigrations/20240804163626_relationshipCorrection.cs
 create mode 100644 Migrations/MainDatabaseMigrations/20240804170841_deviceCategoryNameCorrection.Designer.cs
 create mode 100644 Migrations/MainDatabaseMigrations/20240804170841_deviceCategoryNameCorrection.cs
 create mode 100644 Migrations/MainDatabaseMigrations/MainDatabaseModelSnapshot.cs

diff --git a/Context/dbContext.cs b/Context/dbContext.cs
index 33bdc2d..c8eca65 100644
--- a/Context/dbContext.cs
+++ b/Context/dbContext.cs
@@ -56,7 +56,7 @@ namespace DeviceContext
             modelBuilder.Entity<DeviceCategory>()
             .HasMany(e => e.Devices)
             .WithOne(e => e.DeviceCategory)
-            .HasForeignKey(e => e.DeviceName)
+            .HasForeignKey(e => e.DeviceCategoryId)
             .IsRequired();
 
             // modelBuilder.Entity<Maker>()
diff --git a/Controllers/DeviceActionsController.cs b/Controllers/DeviceActionsController.cs
index 97248eb..c98025f 100644
--- a/Controllers/DeviceActionsController.cs
+++ b/Controllers/DeviceActionsController.cs
@@ -7,6 +7,7 @@ using MacSave.Models.SinalHistory;
 using mac_register.Models.FullDeviceCreate;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.EntityFrameworkCore;
+using Microsoft.Extensions.Logging;
 using Model.ProblemTreatWrapper;
 using Models.UsedAtWrapper.UsedAtWrapper;
 
@@ -16,14 +17,20 @@ namespace Controller.DeviceActionsController
     [Route("api/[controller]")]
     public class DeviceActionsController : ControllerBase
     {
+        private readonly ILogger<DeviceActionsController> _logger;
         private readonly DeviceDb _db;
         private readonly RegexService _regexService;
 
-        public DeviceActionsController(DeviceDb db, RegexService regexService)
+        public DeviceActionsController(
+            DeviceDb db,
+            RegexService regexService,
+            ILogger<DeviceActionsController> logger
+        )
         {
             _regexService = regexService;
             _db = db;
             _regexService = regexService;
+            _logger = logger;
         }
 
         [HttpGet("GetAllDevices")]
@@ -130,98 +137,169 @@ namespace Controller.DeviceActionsController
             return Ok(results);
         }
 
-        [HttpPost("CreateDevice")]
-        //return to FullDeviceCreate
-        public async Task<ActionResult<object>> CreateDevice(
-            [FromBody] FullDeviceCreate fullDeviceDiry
+        [HttpPost("/create_new_Device")]
+        public async Task<ActionResult<object>> CreateNewDevice(
+            [FromBody] FullDeviceCreate deviceDity
         )
         {
-            if (fullDeviceDiry == null)
-            {
-                return BadRequest("Device cannot be null");
-            }
-
-            var device = new FullDeviceCreate
-            {
-                Model = _regexService.SanitizeInput(fullDeviceDiry.Model),
-                Mac = _regexService.SanitizeInput(fullDeviceDiry.Mac),
-                RemoteAcess = fullDeviceDiry.RemoteAcess,
-                ProblemName = _regexService.SanitizeInput(fullDeviceDiry.ProblemName),
-                ProblemDescription = _regexService.SanitizeInput(fullDeviceDiry.ProblemDescription),
-                UserName = _regexService.SanitizeInput(fullDeviceDiry.UserName),
-                SinalRX = _regexService.SanitizeInput(fullDeviceDiry.SinalRX),
-                SinalTX = _regexService.SanitizeInput(fullDeviceDiry.SinalTX),
-            };
-
             try
             {
-                //get maker id to device category
-                var deviceCategory = await _db.DeviceCategories.FirstOrDefaultAsync(dc =>
-                    dc.DeviceCategoryName == "teste"
-                );
-
-                // if (deviceCategory == null)
-                // {
-                //     return BadRequest("Device Name Not Found!");
-                // }
-
-                //  !!! FIND DDIRY PARAM
-                //check if is null
-               
-
-                //creating a device and save it
-                var deviceMac = new DeviceCreate
+                if (deviceDity == null)
                 {
-                    Model = device.Model,
-                    Mac = device.Mac,
-                    RemoteAcess = device.RemoteAcess,
-                    DeviceName = "teste",
-                };
-                await _db.Devices.AddAsync(deviceMac);
-                await _db.SaveChangesAsync();
+                    return BadRequest("device cannot be null!");
+                }
 
-                //instance a new problem and save it
-                var problem = new ProblemTreatWrapper
-                {
-                    ProblemName = device.ProblemName,
-                    ProblemDescription = device.ProblemDescription,
-                    DeviceId = deviceMac.DeviceId
-                };
-                deviceMac.Problems.Add(problem);
-                await _db.Problems.AddAsync(problem);
+                _logger.LogInformation(
+                    "---------------------------\n\nDevice Raw: \nCategory_Id_Device={ Category_Id_Device }, \nDeviceCategoryName= {DeviceCategoryName}, \nMac={ Mac }, \nRemoteAcess={ RemoteAcess }, \nProblemName={ ProblemName }, \nProblemDescription={ ProblemDescription }, \nUserName={ UserName }, \nSinalRX={ SinalRX }, \nSinalTX={ SinalTX }",
+                    deviceDity.Category_Id_Device,
+                    deviceDity.DeviceCategoryName,
+                    deviceDity.Mac,
+                    deviceDity.RemoteAcess,
+                    deviceDity.ProblemName,
+                    deviceDity.ProblemDescription,
+                    deviceDity.UserName,
+                    deviceDity.SinalRX,
+                    deviceDity.SinalTX
+                );
 
-                var sinalHistory = new SinalHistory
+                var deviceCategory = await _db.DeviceCategories.FirstOrDefaultAsync(dc =>
+                    dc.DeviceCategoryId == deviceDity.Category_Id_Device
+                );
+                //check if device is null and loggin it
+                if (deviceCategory == null)
                 {
-                    SinalRX = device.SinalRX,
-                    SinalTX = device.SinalTX,
-                    DeviceId = deviceMac.DeviceId,
-                };
-                deviceMac.AddSinal(sinalHistory);
+                    return BadRequest("category not found!");
+                }
+                ;
+                _logger.LogInformation(
+                    "\n\nloggin device category info:\nDeviceCategoryName = {},\nDeviceCategoryID = {}\n\n",
+                    deviceCategory.DeviceCategoryName,
+                    deviceCategory.DeviceCategoryId
+                );
 
-                //instance a new user and save it
-                var usedAt = new UsedAtWrapper
+                //instance a new device create and pass device category name him
+                var MacDevice = new DeviceCreate
                 {
-                    Name = device.UserName,
-                    DeviceId = deviceMac.DeviceId
+                    Mac = deviceDity.Mac,
+                    Model = deviceDity.Category_Id_Device,
+                    RemoteAcess = deviceDity.RemoteAcess,
+                    DeviceCategoryId = deviceDity.DeviceCategoryName
                 };
-                deviceMac.UsedAtClients.Add(usedAt);
-
-                // deviceCategory.AddDeviceToCategory(deviceMac);
-                // await _db.SaveChangesAsync();
+                _logger.LogInformation(
+                    " \nchecking status of device create\n\nMacDevice Mac = {}, \nMacDevice model = {}\n, MacDevice Remote Acess = {}, \nMacDevice.DeviceCategoryId = {}\n\n\n\n---------------------------\n\n\n",
+                    MacDevice.Mac,
+                    MacDevice.Model,
+                    MacDevice.RemoteAcess,
+                    MacDevice.DeviceCategoryId
+                );
+                await _db.Devices.AddAsync(MacDevice);
+                await _db.SaveChangesAsync();
 
-                var responde = new
-                {
-                    deviceMac,
-                    usedAt,
-                    problem
-                };
+                deviceCategory.AddDeviceToCategory(MacDevice);
+                await _db.SaveChangesAsync();
 
-                return Ok(responde);
+                return Ok(deviceDity);
             }
-            catch (Exception ex)
+            catch (System.Exception ex)
             {
-                return BadRequest($"Failed to create device: {ex.Message}, {ex.StackTrace}, {ex.GetBaseException()}");	
+                _logger.LogError(ex, "Erro ao criar novo dispositivo");
+                return BadRequest(ex.Message);
             }
         }
+
+        // [HttpPost("CreateDevice")]
+        // //return to FullDeviceCreate
+        // public async Task<ActionResult<object>> CreateDevice(
+        //     [FromBody] FullDeviceCreate fullDeviceDiry
+        // )
+        // {
+        //     if (fullDeviceDiry == null)
+        //     {
+        //         return BadRequest("Device cannot be null");
+        //     }
+
+        //     var device = new FullDeviceCreate
+        //     {
+        //         Model = _regexService.SanitizeInput(fullDeviceDiry.Model),
+        //         Mac = _regexService.SanitizeInput(fullDeviceDiry.Mac),
+        //         RemoteAcess = fullDeviceDiry.RemoteAcess,
+        //         ProblemName = _regexService.SanitizeInput(fullDeviceDiry.ProblemName),
+        //         ProblemDescription = _regexService.SanitizeInput(fullDeviceDiry.ProblemDescription),
+        //         UserName = _regexService.SanitizeInput(fullDeviceDiry.UserName),
+        //         SinalRX = _regexService.SanitizeInput(fullDeviceDiry.SinalRX),
+        //         SinalTX = _regexService.SanitizeInput(fullDeviceDiry.SinalTX),
+        //     };
+
+        //     try
+        //     {
+        //         //get maker id to device category
+        //         var deviceCategory = await _db.DeviceCategories.FirstOrDefaultAsync(dc =>
+        //             dc.DeviceCategoryName == device.Model
+        //         );
+
+        //         //  !!! FIND DDIRY PARAM
+        //         //check if is null
+
+        //         if (deviceCategory == null)
+        //         {
+        //             return BadRequest("Device Name Not Found!");
+        //         }
+
+        //         //creating a device and save it
+        //         var deviceMac = new DeviceCreate
+        //         {
+        //             Model = device.Model,
+        //             Mac = device.Mac,
+        //             RemoteAcess = device.RemoteAcess,
+        //             DeviceCategoryName = deviceCategory.DeviceCategoryName,
+        //         };
+        //         await _db.Devices.AddAsync(deviceMac);
+        //         await _db.SaveChangesAsync();
+
+        //         deviceCategory.AddDeviceToCategory(deviceMac);
+        //         await _db.SaveChangesAsync();
+
+        //         //instance a new problem and save it
+        //         var problem = new ProblemTreatWrapper
+        //         {
+        //             ProblemName = device.ProblemName,
+        //             ProblemDescription = device.ProblemDescription,
+        //             DeviceId = deviceMac.DeviceId
+        //         };
+        //         deviceMac.Problems.Add(problem);
+        //         await _db.Problems.AddAsync(problem);
+
+        //         var sinalHistory = new SinalHistory
+        //         {
+        //             SinalRX = device.SinalRX,
+        //             SinalTX = device.SinalTX,
+        //             DeviceId = deviceMac.DeviceId,
+        //         };
+        //         deviceMac.AddSinal(sinalHistory);
+
+        //         //instance a new user and save it
+        //         var usedAt = new UsedAtWrapper
+        //         {
+        //             Name = device.UserName,
+        //             DeviceId = deviceMac.DeviceId
+        //         };
+        //         deviceMac.UsedAtClients.Add(usedAt);
+
+        //         var responde = new
+        //         {
+        //             deviceMac,
+        //             usedAt,
+        //             problem
+        //         };
+
+        //         return Ok(responde);
+        //     }
+        //     catch (Exception ex)
+        //     {
+        //         return BadRequest(
+        //             $"Failed to create device: {ex.Message}, {ex.StackTrace}, {ex.GetBaseException()}"
+        //         );
+        //     }
+        // }
     }
 }
diff --git a/Migrations/20240804163557_relationshipCorrection.Designer.cs b/Migrations/20240804163557_relationshipCorrection.Designer.cs
new file mode 100644
index 0000000..1146bfe
--- /dev/null
+++ b/Migrations/20240804163557_relationshipCorrection.Designer.cs
@@ -0,0 +1,280 @@
+﻿// <auto-generated />
+using System;
+using DeviceContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    [DbContext(typeof(DeviceDb))]
+    [Migration("20240804163557_relationshipCorrection")]
+    partial class relationshipCorrection
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Property<string>("DeviceId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAcess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceId");
+
+                    b.HasIndex("DeviceName");
+
+                    b.ToTable("Devices");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalRX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalTX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Timestamp")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Histories");
+                });
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MacstoDbs");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("ProblemDescription")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("ProblemName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Problems");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("UsedAtClient");
+                });
+
+            modelBuilder.Entity("ModelsFileToUpload.FileToUpload", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<byte[]>("Data")
+                        .IsRequired()
+                        .HasColumnType("BLOB");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("FilesUploads");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", "DeviceCategory")
+                        .WithMany("Devices")
+                        .HasForeignKey("DeviceName")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCategory");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", null)
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("SinalHistory")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("Problems")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("UsedAtClients")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Navigation("Problems");
+
+                    b.Navigation("SinalHistory");
+
+                    b.Navigation("UsedAtClients");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Navigation("Devices");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/20240804163557_relationshipCorrection.cs b/Migrations/20240804163557_relationshipCorrection.cs
new file mode 100644
index 0000000..da32fef
--- /dev/null
+++ b/Migrations/20240804163557_relationshipCorrection.cs
@@ -0,0 +1,22 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    /// <inheritdoc />
+    public partial class relationshipCorrection : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+
+        }
+    }
+}
diff --git a/Migrations/20240804170828_deviceCategoryNameCorrection.Designer.cs b/Migrations/20240804170828_deviceCategoryNameCorrection.Designer.cs
new file mode 100644
index 0000000..a97c6c9
--- /dev/null
+++ b/Migrations/20240804170828_deviceCategoryNameCorrection.Designer.cs
@@ -0,0 +1,280 @@
+﻿// <auto-generated />
+using System;
+using DeviceContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    [DbContext(typeof(DeviceDb))]
+    [Migration("20240804170828_deviceCategoryNameCorrection")]
+    partial class deviceCategoryNameCorrection
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Property<string>("DeviceId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAcess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceId");
+
+                    b.HasIndex("DeviceCategoryName");
+
+                    b.ToTable("Devices");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalRX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalTX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Timestamp")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Histories");
+                });
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MacstoDbs");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("ProblemDescription")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("ProblemName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Problems");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("UsedAtClient");
+                });
+
+            modelBuilder.Entity("ModelsFileToUpload.FileToUpload", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<byte[]>("Data")
+                        .IsRequired()
+                        .HasColumnType("BLOB");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("FilesUploads");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", "DeviceCategory")
+                        .WithMany("Devices")
+                        .HasForeignKey("DeviceCategoryName")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCategory");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", null)
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("SinalHistory")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("Problems")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("UsedAtClients")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Navigation("Problems");
+
+                    b.Navigation("SinalHistory");
+
+                    b.Navigation("UsedAtClients");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Navigation("Devices");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/20240804170828_deviceCategoryNameCorrection.cs b/Migrations/20240804170828_deviceCategoryNameCorrection.cs
new file mode 100644
index 0000000..c149075
--- /dev/null
+++ b/Migrations/20240804170828_deviceCategoryNameCorrection.cs
@@ -0,0 +1,62 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    /// <inheritdoc />
+    public partial class deviceCategoryNameCorrection : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_Devices_DeviceCategories_DeviceName",
+                table: "Devices");
+
+            migrationBuilder.RenameColumn(
+                name: "DeviceName",
+                table: "Devices",
+                newName: "DeviceCategoryName");
+
+            migrationBuilder.RenameIndex(
+                name: "IX_Devices_DeviceName",
+                table: "Devices",
+                newName: "IX_Devices_DeviceCategoryName");
+
+            migrationBuilder.AddForeignKey(
+                name: "FK_Devices_DeviceCategories_DeviceCategoryName",
+                table: "Devices",
+                column: "DeviceCategoryName",
+                principalTable: "DeviceCategories",
+                principalColumn: "DeviceCategoryId",
+                onDelete: ReferentialAction.Cascade);
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_Devices_DeviceCategories_DeviceCategoryName",
+                table: "Devices");
+
+            migrationBuilder.RenameColumn(
+                name: "DeviceCategoryName",
+                table: "Devices",
+                newName: "DeviceName");
+
+            migrationBuilder.RenameIndex(
+                name: "IX_Devices_DeviceCategoryName",
+                table: "Devices",
+                newName: "IX_Devices_DeviceName");
+
+            migrationBuilder.AddForeignKey(
+                name: "FK_Devices_DeviceCategories_DeviceName",
+                table: "Devices",
+                column: "DeviceName",
+                principalTable: "DeviceCategories",
+                principalColumn: "DeviceCategoryId",
+                onDelete: ReferentialAction.Cascade);
+        }
+    }
+}
diff --git a/Migrations/20240804194240_changeDeviceCategoryId.Designer.cs b/Migrations/20240804194240_changeDeviceCategoryId.Designer.cs
new file mode 100644
index 0000000..1621777
--- /dev/null
+++ b/Migrations/20240804194240_changeDeviceCategoryId.Designer.cs
@@ -0,0 +1,280 @@
+﻿// <auto-generated />
+using System;
+using DeviceContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    [DbContext(typeof(DeviceDb))]
+    [Migration("20240804194240_changeDeviceCategoryId")]
+    partial class changeDeviceCategoryId
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Property<string>("DeviceId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAcess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceId");
+
+                    b.HasIndex("DeviceCategoryId");
+
+                    b.ToTable("Devices");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Property<string>("MakerId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("MakerId");
+
+                    b.ToTable("Makers");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Property<string>("DeviceCategoryId")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceCategoryName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("MakerId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<int>("OperationMode")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("DeviceCategoryId");
+
+                    b.HasIndex("MakerId");
+
+                    b.ToTable("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalRX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("SinalTX")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<DateTime>("Timestamp")
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Histories");
+                });
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MacstoDbs");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("ProblemDescription")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("ProblemName")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("Problems");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("DeviceId")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("DeviceId");
+
+                    b.ToTable("UsedAtClient");
+                });
+
+            modelBuilder.Entity("ModelsFileToUpload.FileToUpload", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<byte[]>("Data")
+                        .IsRequired()
+                        .HasColumnType("BLOB");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("FilesUploads");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", "DeviceCategory")
+                        .WithMany("Devices")
+                        .HasForeignKey("DeviceCategoryId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCategory");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.HasOne("MacSave.Models.Categories.Maker", null)
+                        .WithMany("DeviceCategories")
+                        .HasForeignKey("MakerId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+
+            modelBuilder.Entity("MacSave.Models.SinalHistory.SinalHistory", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("SinalHistory")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Model.ProblemTreatWrapper.ProblemTreatWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("Problems")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("Models.UsedAtWrapper.UsedAtWrapper.UsedAtWrapper", b =>
+                {
+                    b.HasOne("DeviceModel.DeviceCreate", "DeviceCreate")
+                        .WithMany("UsedAtClients")
+                        .HasForeignKey("DeviceId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+
+                    b.Navigation("DeviceCreate");
+                });
+
+            modelBuilder.Entity("DeviceModel.DeviceCreate", b =>
+                {
+                    b.Navigation("Problems");
+
+                    b.Navigation("SinalHistory");
+
+                    b.Navigation("UsedAtClients");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Maker", b =>
+                {
+                    b.Navigation("DeviceCategories");
+                });
+
+            modelBuilder.Entity("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", b =>
+                {
+                    b.Navigation("Devices");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/20240804194240_changeDeviceCategoryId.cs b/Migrations/20240804194240_changeDeviceCategoryId.cs
new file mode 100644
index 0000000..64cad87
--- /dev/null
+++ b/Migrations/20240804194240_changeDeviceCategoryId.cs
@@ -0,0 +1,62 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations
+{
+    /// <inheritdoc />
+    public partial class changeDeviceCategoryId : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_Devices_DeviceCategories_DeviceCategoryName",
+                table: "Devices");
+
+            migrationBuilder.RenameColumn(
+                name: "DeviceCategoryName",
+                table: "Devices",
+                newName: "DeviceCategoryId");
+
+            migrationBuilder.RenameIndex(
+                name: "IX_Devices_DeviceCategoryName",
+                table: "Devices",
+                newName: "IX_Devices_DeviceCategoryId");
+
+            migrationBuilder.AddForeignKey(
+                name: "FK_Devices_DeviceCategories_DeviceCategoryId",
+                table: "Devices",
+                column: "DeviceCategoryId",
+                principalTable: "DeviceCategories",
+                principalColumn: "DeviceCategoryId",
+                onDelete: ReferentialAction.Cascade);
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_Devices_DeviceCategories_DeviceCategoryId",
+                table: "Devices");
+
+            migrationBuilder.RenameColumn(
+                name: "DeviceCategoryId",
+                table: "Devices",
+                newName: "DeviceCategoryName");
+
+            migrationBuilder.RenameIndex(
+                name: "IX_Devices_DeviceCategoryId",
+                table: "Devices",
+                newName: "IX_Devices_DeviceCategoryName");
+
+            migrationBuilder.AddForeignKey(
+                name: "FK_Devices_DeviceCategories_DeviceCategoryName",
+                table: "Devices",
+                column: "DeviceCategoryName",
+                principalTable: "DeviceCategories",
+                principalColumn: "DeviceCategoryId",
+                onDelete: ReferentialAction.Cascade);
+        }
+    }
+}
diff --git a/Migrations/DeviceDbModelSnapshot.cs b/Migrations/DeviceDbModelSnapshot.cs
index 2321718..641d69d 100644
--- a/Migrations/DeviceDbModelSnapshot.cs
+++ b/Migrations/DeviceDbModelSnapshot.cs
@@ -23,7 +23,7 @@ namespace MacSave.Migrations
                         .ValueGeneratedOnAdd()
                         .HasColumnType("TEXT");
 
-                    b.Property<string>("DeviceName")
+                    b.Property<string>("DeviceCategoryId")
                         .IsRequired()
                         .HasColumnType("TEXT");
 
@@ -40,7 +40,7 @@ namespace MacSave.Migrations
 
                     b.HasKey("DeviceId");
 
-                    b.HasIndex("DeviceName");
+                    b.HasIndex("DeviceCategoryId");
 
                     b.ToTable("Devices");
                 });
@@ -204,7 +204,7 @@ namespace MacSave.Migrations
                 {
                     b.HasOne("MacSave.Models.Categories.Models_of_Devices.DeviceCategory", "DeviceCategory")
                         .WithMany("Devices")
-                        .HasForeignKey("DeviceName")
+                        .HasForeignKey("DeviceCategoryId")
                         .OnDelete(DeleteBehavior.Cascade)
                         .IsRequired();
 
diff --git a/Migrations/MainDatabaseMigrations/20240804163626_relationshipCorrection.Designer.cs b/Migrations/MainDatabaseMigrations/20240804163626_relationshipCorrection.Designer.cs
new file mode 100644
index 0000000..715a4f2
--- /dev/null
+++ b/Migrations/MainDatabaseMigrations/20240804163626_relationshipCorrection.Designer.cs
@@ -0,0 +1,47 @@
+﻿// <auto-generated />
+using MainDatabaseContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations.MainDatabaseMigrations
+{
+    [DbContext(typeof(MainDatabase))]
+    [Migration("20240804163626_relationshipCorrection")]
+    partial class relationshipCorrection
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("DevicesToMain");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/MainDatabaseMigrations/20240804163626_relationshipCorrection.cs b/Migrations/MainDatabaseMigrations/20240804163626_relationshipCorrection.cs
new file mode 100644
index 0000000..f07d9e7
--- /dev/null
+++ b/Migrations/MainDatabaseMigrations/20240804163626_relationshipCorrection.cs
@@ -0,0 +1,36 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations.MainDatabaseMigrations
+{
+    /// <inheritdoc />
+    public partial class relationshipCorrection : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.CreateTable(
+                name: "DevicesToMain",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "INTEGER", nullable: false)
+                        .Annotation("Sqlite:Autoincrement", true),
+                    Model = table.Column<string>(type: "TEXT", maxLength: 100, nullable: false),
+                    Mac = table.Column<string>(type: "TEXT", nullable: false),
+                    RemoteAccess = table.Column<bool>(type: "INTEGER", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_DevicesToMain", x => x.Id);
+                });
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "DevicesToMain");
+        }
+    }
+}
diff --git a/Migrations/MainDatabaseMigrations/20240804170841_deviceCategoryNameCorrection.Designer.cs b/Migrations/MainDatabaseMigrations/20240804170841_deviceCategoryNameCorrection.Designer.cs
new file mode 100644
index 0000000..81f5d38
--- /dev/null
+++ b/Migrations/MainDatabaseMigrations/20240804170841_deviceCategoryNameCorrection.Designer.cs
@@ -0,0 +1,47 @@
+﻿// <auto-generated />
+using MainDatabaseContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations.MainDatabaseMigrations
+{
+    [DbContext(typeof(MainDatabase))]
+    [Migration("20240804170841_deviceCategoryNameCorrection")]
+    partial class deviceCategoryNameCorrection
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("DevicesToMain");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Migrations/MainDatabaseMigrations/20240804170841_deviceCategoryNameCorrection.cs b/Migrations/MainDatabaseMigrations/20240804170841_deviceCategoryNameCorrection.cs
new file mode 100644
index 0000000..b8faf7c
--- /dev/null
+++ b/Migrations/MainDatabaseMigrations/20240804170841_deviceCategoryNameCorrection.cs
@@ -0,0 +1,22 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace MacSave.Migrations.MainDatabaseMigrations
+{
+    /// <inheritdoc />
+    public partial class deviceCategoryNameCorrection : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+
+        }
+    }
+}
diff --git a/Migrations/MainDatabaseMigrations/MainDatabaseModelSnapshot.cs b/Migrations/MainDatabaseMigrations/MainDatabaseModelSnapshot.cs
new file mode 100644
index 0000000..9f40463
--- /dev/null
+++ b/Migrations/MainDatabaseMigrations/MainDatabaseModelSnapshot.cs
@@ -0,0 +1,44 @@
+﻿// <auto-generated />
+using MainDatabaseContext;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+#nullable disable
+
+namespace MacSave.Migrations.MainDatabaseMigrations
+{
+    [DbContext(typeof(MainDatabase))]
+    partial class MainDatabaseModelSnapshot : ModelSnapshot
+    {
+        protected override void BuildModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");
+
+            modelBuilder.Entity("MacToDatabaseModel.MacToDatabase", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("INTEGER");
+
+                    b.Property<string>("Mac")
+                        .IsRequired()
+                        .HasColumnType("TEXT");
+
+                    b.Property<string>("Model")
+                        .IsRequired()
+                        .HasMaxLength(100)
+                        .HasColumnType("TEXT");
+
+                    b.Property<bool>("RemoteAccess")
+                        .HasColumnType("INTEGER");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("DevicesToMain");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Models/Categories/Models of Devices/DeviceCategory.cs b/Models/Categories/Models of Devices/DeviceCategory.cs
index b343d46..079f727 100644
--- a/Models/Categories/Models of Devices/DeviceCategory.cs	
+++ b/Models/Categories/Models of Devices/DeviceCategory.cs	
@@ -15,7 +15,7 @@ namespace MacSave.Models.Categories.Models_of_Devices
         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
         public string DeviceCategoryId { get; set; } = Guid.NewGuid().ToString();
 
-        public string DeviceCategoryName { get; set; }
+        public required string DeviceCategoryName { get; set; } 
 
         //if Operation mode was not provide, then default value is set to NONE, but can change before
         public OperationModelEnum OperationMode { get; set; } = OperationModelEnum.None;
@@ -27,10 +27,10 @@ namespace MacSave.Models.Categories.Models_of_Devices
         // [JsonIgnore]
         // public Maker Maker { get; set; } = null!;
 
-        
-        
         [JsonIgnore]
         public ICollection<DeviceCreate> Devices { get; set; } = new List<DeviceCreate>();
+        
+        
 
         public void AddDeviceToCategory(DeviceCreate deviceCreate)
         {
diff --git a/Models/Device.cs b/Models/Device.cs
index 12e4cd0..2598c48 100644
--- a/Models/Device.cs
+++ b/Models/Device.cs
@@ -21,7 +21,7 @@ public class DeviceCreate
 
     //reference Device Category
     [ForeignKey("DeviceCategory")]
-    public string DeviceName { get; set; }
+    public string DeviceCategoryId { get; set; }
 
     [JsonIgnore]
     public DeviceCategory DeviceCategory { get; set; } = null!;
diff --git a/Models/FullDeviceCreate/FullDeviceCreate.cs b/Models/FullDeviceCreate/FullDeviceCreate.cs
index 84089d5..5bde19f 100644
--- a/Models/FullDeviceCreate/FullDeviceCreate.cs
+++ b/Models/FullDeviceCreate/FullDeviceCreate.cs
@@ -10,9 +10,12 @@ namespace mac_register.Models.FullDeviceCreate
 {
     public class FullDeviceCreate
     {
-        public string Model { get; set; }
+        //refer id of the maker that owns this model
+        public string Category_Id_Device { get; set; }
+
         public string Mac { get; set; }
         public bool RemoteAcess { get; set; }
+        public string DeviceCategoryName { get; set; }
 
         //map array of the problems that come from array of params
         public string ProblemName { get; set; }
-- 
2.39.0.windows.2

